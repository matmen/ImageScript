{"version":3,"file":"ImageScript.js","mappings":"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","sources":["webpack://ImageScript/webpack/universalModuleDefinition","webpack://ImageScript/./ImageScript.js","webpack://ImageScript/./utils/buffer.js","webpack://ImageScript/./utils/crc32.js","webpack://ImageScript/./utils/png.js","webpack://ImageScript/./utils/wasm/font.js","webpack://ImageScript/./utils/wasm/gif.js","webpack://ImageScript/./utils/wasm/jpeg.js","webpack://ImageScript/./utils/wasm/svg.js","webpack://ImageScript/./utils/wasm/tiff.js","webpack://ImageScript/./utils/zlib.js","webpack://ImageScript/webpack/bootstrap","webpack://ImageScript/webpack/startup"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ImageScript\"] = factory();\n\telse\n\t\troot[\"ImageScript\"] = factory();\n})(self, () => {\nreturn ","const png = require('./utils/png');\nconst mem = require('./utils/buffer.js');\nconst giflib = require('./utils/wasm/gif');\nconst svglib = require('./utils/wasm/svg');\nconst {version} = require('./package.json');\nconst fontlib = require('./utils/wasm/font');\nconst jpeglib = require('./utils/wasm/jpeg');\nconst tifflib = require('./utils/wasm/tiff');\n\nconst MAGIC_NUMBERS = {\n    PNG: 0x89504e47,\n    JPEG: 0xffd8ff,\n    TIFF: 0x49492a00,\n    GIF: 0x474946\n};\n\n/**\n * Represents an image; provides utility functions\n */\nclass Image {\n    /**\n     * Creates a new image with the given dimensions\n     * @param {number} width\n     * @param {number} height\n     * @returns {Image}\n     */\n    constructor(width, height) {\n        width = ~~width;\n        height = ~~height;\n\n        if (width < 1)\n            throw new RangeError('Image has to be at least 1 pixel wide');\n        if (height < 1)\n            throw new RangeError('Image has to be at least 1 pixel high');\n\n        /** @private */\n        this.__width__ = width;\n        /** @private */\n        this.__height__ = height;\n        /** @private */\n        this.__buffer__ = new ArrayBuffer(width * height * 4);\n        /** @private */\n        this.__view__ = new DataView(this.__buffer__);\n        /** @private */\n        this.__u32__ = new Uint32Array(this.__buffer__);\n        /**\n         * The images RGBA pixel data\n         * @type {Uint8ClampedArray}\n         */\n        this.bitmap = new Uint8ClampedArray(this.__buffer__);\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    toString() {\n        return `Image<${this.width}x${this.height}>`;\n    }\n\n    /**\n     * The images width\n     * @returns {number}\n     */\n    get width() {\n        return this.__width__;\n    }\n\n    /**\n     * The images height\n     * @returns {number}\n     */\n    get height() {\n        return this.__height__;\n    }\n\n    /**\n     * Yields an [x, y] array for every pixel in the image\n     * @yields {number[]} The coordinates of the pixel ([x, y])\n     * @returns {void}\n     */\n    * [Symbol.iterator]() {\n        for (let y = 1; y <= this.height; y++) {\n            for (let x = 1; x <= this.width; x++) {\n                yield [x, y];\n            }\n        }\n    }\n\n    /**\n     * Yields an [x, y, color] array for every pixel in the image\n     * @yields {number[]} The coordinates and color of the pixel ([x, y, color])\n     */\n    * iterateWithColors() {\n        let offset = 0;\n        for (let y = 1; y <= this.height; y++) {\n            for (let x = 1; x <= this.width; x++) {\n                yield [x, y, this.__view__.getUint32(offset, false)];\n                offset += 4;\n            }\n        }\n    }\n\n    /**\n     * Converts RGBA components to an RGBA value\n     * @param {number} r red (0..255)\n     * @param {number} g green (0..255)\n     * @param {number} b blue (0..255)\n     * @param {number} a alpha (0..255)\n     * @returns {number} RGBA value\n     */\n    static rgbaToColor(r, g, b, a) {\n        return (((r & 0xff) << 24) | ((g & 0xff) << 16) | ((b & 0xff) << 8) | (a & 0xff)) >>> 0;\n    }\n\n    /**\n     * Converts RGB components to an RGBA value (assuming alpha = 255)\n     * @param {number} r red (0..255)\n     * @param {number} g green (0..255)\n     * @param {number} b blue (0..255)\n     * @returns {number} RGBA value\n     */\n    static rgbToColor(r, g, b) {\n        return Image.rgbaToColor(r, g, b, 0xff);\n    }\n\n    /**\n     * Converts HSLA colors to RGBA colors\n     * @param {number} h hue (0..1)\n     * @param {number} s saturation (0..1)\n     * @param {number} l lightness (0..1)\n     * @param {number} a opacity (0..1)\n     * @returns {number} color\n     */\n    static hslaToColor(h, s, l, a) {\n        h %= 1;\n        s = Math.min(1, Math.max(0, s));\n        l = Math.min(1, Math.max(0, l));\n        a = Math.min(1, Math.max(0, a));\n\n        let r, g, b;\n\n        if (s === 0) {\n            r = g = b = l;\n        } else {\n            const hue2rgb = (p, q, t) => {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            };\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n\n        return Image.rgbaToColor(r * 255, g * 255, b * 255, a * 255);\n    }\n\n    /**\n     * Converts HSL colors to RGBA colors (assuming an opacity of 255)\n     * @param {number} h hue (0..1)\n     * @param {number} s saturation (0..1)\n     * @param {number} l lightness (0..1)\n     * @returns {number} color\n     */\n    static hslToColor(h, s, l) {\n        return Image.hslaToColor(h, s, l, 1);\n    }\n\n    /**\n     * Converts an RGBA value to an array of HSLA values\n     * @param r {number} (0..255)\n     * @param g {number} (0..255)\n     * @param b {number} (0..255)\n     * @param a {number} (0..255)\n     * @returns {number[]} The HSLA values ([H, S, L, A])\n     */\n    static rgbaToHSLA(r, g, b, a) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        const max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h, s, l = (max + min) / 2;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n\n            h /= 6;\n        }\n\n        return [h, s, l, a / 255];\n    }\n\n    /**\n     * Converts a color value to an array of RGBA values\n     * @param {number} color The color value to convert\n     * @returns {number[]} The RGBA values ([R, G, B, A])\n     */\n    static colorToRGBA(color) {\n        return [(color >> 24) & 0xff, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff];\n    }\n\n    /**\n     * Converts a color value to an array of RGB values (ignoring the colors alpha)\n     * @param {number} color The color value to convert\n     * @returns {number[]} The RGB values ([R, G, B])\n     */\n    static colorToRGB(color) {\n        return Image.colorToRGBA(color).slice(0, 3);\n    }\n\n    /**\n     * Gets the pixel color at the specified position\n     * @param {number} x\n     * @param {number} y\n     * @returns {number} The color value\n     */\n    getPixelAt(x, y) {\n        this.__check_boundaries__(x, y);\n        return this.__view__.getUint32(((~~y - 1) * this.width + (~~x - 1)) * 4, false);\n    }\n\n    /**\n     * Gets the pixel color at the specified position\n     * @param {number} x\n     * @param {number} y\n     * @returns {Uint8ClampedArray} The RGBA value\n     */\n    getRGBAAt(x, y) {\n        this.__check_boundaries__(x, y);\n        const idx = ((~~y - 1) * this.width + (~~x - 1)) * 4;\n        return this.bitmap.subarray(idx, idx + 4);\n    }\n\n    /**\n     * Sets the pixel color for the specified position\n     * @param {number} x\n     * @param {number} y\n     * @param {number} pixelColor\n     */\n    setPixelAt(x, y, pixelColor) {\n        x = ~~x;\n        y = ~~y;\n        this.__check_boundaries__(x, y);\n        this.__set_pixel__(x, y, pixelColor);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @param {number} pixelColor\n     */\n    __set_pixel__(x, y, pixelColor) {\n        this.__view__.setUint32(((y - 1) * this.width + (x - 1)) * 4, pixelColor, false);\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     */\n    __check_boundaries__(x, y) {\n        if (isNaN(x)) throw new TypeError(`Invalid pixel coordinates (x=${x})`);\n        if (isNaN(y)) throw new TypeError(`Invalid pixel coordinates (y=${y})`);\n        if (x < 1)\n            throw new RangeError(`${Image.__out_of_bounds__} (x=${x})<1`);\n        if (x > this.width)\n            throw new RangeError(`${Image.__out_of_bounds__} (x=${x})>(width=${this.width})`);\n        if (y < 1)\n            throw new RangeError(`${Image.__out_of_bounds__} (y=${y})<1`);\n        if (y > this.height)\n            throw new RangeError(`${Image.__out_of_bounds__} (y=${y})>(height=${this.height})`);\n    }\n\n    /**\n     * @private\n     */\n    static get __out_of_bounds__() {\n        return 'Tried referencing a pixel outside of the images boundaries:';\n    }\n\n    /**\n     * @callback colorFunction\n     * @param {number} x\n     * @param {number} y\n     * @returns {number} pixel color\n     */\n\n    /**\n     * Fills the image data with the supplied color\n     * @param {number|colorFunction} color\n     * @returns {Image}\n     */\n    fill(color) {\n        const type = typeof color;\n        if (type !== 'function') {\n            this.__view__.setUint32(0, color, false);\n            this.__u32__.fill(this.__u32__[0]);\n        } else {\n            let offset = 0;\n            for (let y = 1; y <= this.height; y++) {\n                for (let x = 1; x <= this.width; x++) {\n                    this.__view__.setUint32(offset, color(x, y), false);\n                    offset += 4;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Clones the current image\n     * @returns {Image}\n     */\n    clone() {\n        const image = new Image(this.width, this.height);\n        image.bitmap.set(this.bitmap);\n        return image;\n    }\n\n    /**\n     * Use {@link https://en.wikipedia.org/wiki/Image_scaling#Nearest-neighbor_interpolation Nearest-neighbor} resizing.\n     * @returns {string}\n     */\n    static get RESIZE_NEAREST_NEIGHBOR() {\n        return 'RESIZE_NEAREST_NEIGHBOR';\n    }\n\n    /**\n     * Used for automatically preserving an images aspect ratio when resizing.\n     * @returns {number}\n     */\n    static get RESIZE_AUTO() {\n        return -1;\n    }\n\n    /**\n     * Resizes the image by the given factor\n     * @param {number} factor The factor to resize the image with\n     * @param {string} [mode=Image.RESIZE_NEAREST_NEIGHBOR] The resizing mode to use\n     * @returns {Image}\n     */\n    scale(factor, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const image = this.__scale__(factor, mode);\n        return this.__apply__(image);\n    }\n\n    /** @private */\n    __scale__(factor, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        if (factor === 1) return this;\n        return this.__resize__(this.width * factor, this.height * factor, mode);\n    }\n\n    /**\n     * Resizes the image to the given dimensions.\n     * Use {@link Image.RESIZE_AUTO} as either width or height to automatically preserve the aspect ratio.\n     * @param {number} width The new width\n     * @param {number} height The new height\n     * @param {string} [mode=Image.RESIZE_NEAREST_NEIGHBOR] The resizing mode to use\n     * @returns {Image} The resized image\n     */\n    resize(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const image = this.__resize__(width, height, mode);\n        return this.__apply__(image);\n    }\n\n    /**\n     * Resizes the image so it is contained in the given bounding box.\n     * Can return an image with one axis smaller than the given bounding box.\n     * @param {number} width The width of the bounding box\n     * @param {number} height The height of the bounding box\n     * @param {string} [mode=Image.RESIZE_NEAREST_NEIGHBOR] The resizing mode to use\n     * @returns {Image} The resized image\n     */\n    contain(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const scaleFactor = width / height > this.width / this.height ? height / this.height : width / this.width;\n        return this.scale(scaleFactor, mode);\n    }\n\n    /**\n     * Resizes the image so it is contained in the given bounding box, placing it in the center of the given bounding box.\n     * Always returns the exact dimensions of the bounding box.\n     * @param {number} width The width of the bounding box\n     * @param {number} height The height of the bounding box\n     * @param {string} [mode=Image.RESIZE_NEAREST_NEIGHBOR] The resizing mode to use\n     * @returns {Image} The resized image\n     */\n    fit(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const result = new Image(width, height);\n        this.contain(width, height, mode);\n        result.composite(this, (width - this.width) / 2, (height - this.height) / 2);\n        return this.__apply__(result);\n    }\n\n    /**\n     * Resizes the image so it covers the given bounding box, cropping the overflowing edges.\n     * Always returns the exact dimensions of the bounding box.\n     * @param {number} width The width of the bounding box\n     * @param {number} height The height of the bounding box\n     * @param {string} [mode=Image.RESIZE_NEAREST_NEIGHBOR] The resizing mode to use\n     * @returns {Image} The resized image\n     */\n    cover(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const scaleFactor = width / height > this.width / this.height ? width / this.width : height / this.height;\n        const result = this.scale(scaleFactor, mode);\n        return result.crop((result.width - width) / 2, (result.height - height) / 2, width, height);\n    }\n\n    /** @private */\n    __resize__(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        if (width === Image.RESIZE_AUTO && height === Image.RESIZE_AUTO) throw new Error('RESIZE_AUTO can only be used for either width or height, not for both');\n        else if (width === Image.RESIZE_AUTO) width = this.width / this.height * height;\n        else if (height === Image.RESIZE_AUTO) height = this.height / this.width * width;\n\n        width = Math.floor(width);\n        height = Math.floor(height);\n        if (width < 1)\n            throw new RangeError('Image has to be at least 1 pixel wide');\n        if (height < 1)\n            throw new RangeError('Image has to be at least 1 pixel high');\n\n        let image;\n        if (mode === Image.RESIZE_NEAREST_NEIGHBOR)\n            image = this.__resize_nearest_neighbor__(width, height);\n        else throw new Error('Invalid resize mode');\n\n        return image;\n    }\n\n    /**\n     * @private\n     * @param {number} width The new width\n     * @param {number} height The new height\n     */\n    __resize_nearest_neighbor__(width, height) {\n        const image = new this.constructor(width, height);\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const ySrc = Math.floor((y * this.height) / height);\n                const xSrc = Math.floor((x * this.width) / width);\n\n                const destPos = (y * width + x) * 4;\n                const srcPos = (ySrc * this.width + xSrc) * 4;\n\n                image.__view__.setUint32(destPos, this.__view__.getUint32(srcPos, false), false);\n            }\n        }\n\n        return image;\n    }\n\n    /**\n     * Crops an image to the specified dimensions\n     * @param {number} x The x offset\n     * @param {number} y The y offset\n     * @param {number} width The new images width\n     * @param {number} height The new images height\n     * @returns {Image}\n     */\n    crop(x, y, width, height) {\n        if (width > this.width) width = this.width;\n        if (height > this.height) height = this.height;\n\n        return this.__apply__(this.__crop__(~~x, ~~y, ~~width, ~~height));\n    }\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @returns {Image}\n     * @private\n     */\n    __crop__(x, y, width, height) {\n        x = ~~x;\n        y = ~~y;\n\n        const image = new this.constructor(width, height);\n\n        for (let tY = 0; tY < height; tY++) {\n            const idx = (tY + y) * this.width + x;\n            image.__u32__.set(this.__u32__.subarray(idx, idx + width), tY * width);\n        }\n\n        return image;\n    }\n\n    /**\n     * Draws a box at the specified coordinates\n     * @param {number} x The x offset\n     * @param {number} y The y offset\n     * @param {number} width The box width\n     * @param {number} height The box height\n     * @param {number|colorFunction} color The color to fill the box in with\n     * @returns {Image}\n     */\n    drawBox(x, y, width, height, color) {\n        x = ~~(x - 1);\n        y = ~~(y - 1);\n        width = ~~width;\n        height = ~~height;\n\n        if (typeof color === 'function') {\n            for (let tY = 1; tY <= height; tY++) {\n                for (let tX = 1; tX <= width; tX++) {\n                    const nX = tX + x;\n                    const nY = tY + y;\n                    if (Math.min(nX, nY) < 1 || nX > this.width || nY > this.height)\n                        continue;\n\n                    const tC = color(tX, tY);\n                    this.__set_pixel__(nX, nY, tC);\n                }\n            }\n        } else return this.__fast_box__(x, y, width, height, color);\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} color\n     */\n    __fast_box__(x, y, width, height, color) {\n        if (x < 0) {\n            width += x;\n            x = 0;\n        }\n\n        if (y < 0) {\n            height += y;\n            y = 0;\n        }\n\n        const right = Math.max(Math.min(x + width, this.width), 1);\n        let xPos = right;\n        while (x <= --xPos)\n            this.__view__.setUint32(4 * (xPos + y * this.width), color);\n        const end = 4 * (right + y * this.width);\n        const start = 4 * (x + y * this.width);\n\n        let bottom = Math.max(Math.min(y + height, this.height), 1);\n        while (y < --bottom)\n            this.bitmap.copyWithin(4 * (x + bottom * this.width), start, end);\n\n        return this;\n    }\n\n    /**\n     * Draws a circle at the specified coordinates with the specified radius\n     * @param {number} x The center x position\n     * @param {number} y The center y position\n     * @param {number} radius The circles radius\n     * @param {number|colorFunction} color\n     * @returns {Image}\n     */\n    drawCircle(x, y, radius, color) {\n        const radSquared = radius ** 2;\n        for (let currentY = Math.max(1, y - radius); currentY <= Math.min(y + radius, this.height); currentY++) {\n            for (let currentX = Math.max(1, x - radius); currentX <= Math.min(x + radius, this.width); currentX++) {\n                if ((currentX - x) ** 2 + (currentY - y) ** 2 < radSquared)\n                    this.__set_pixel__(currentX, currentY, typeof color === 'function' ? color(currentX - x + radius, currentY - y + radius) : color);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Crops the image into a circle\n     * @param {boolean} [max=false] Whether to use the larger dimension for the size\n     * @param {number} [feathering=0] How much feathering to apply to the edges\n     * @returns {Image}\n     */\n    cropCircle(max = false, feathering = 0) {\n        const rad = Math[max ? 'max' : 'min'](this.width, this.height) / 2;\n        const radSquared = rad ** 2;\n        const centerX = this.width / 2;\n        const centerY = this.height / 2;\n\n        for (const [x, y] of this) {\n            const distanceFromCenter = (x - centerX) ** 2 + (y - centerY) ** 2;\n            const alphaIdx = ((y - 1) * this.width + (x - 1)) * 4 + 3;\n            if (distanceFromCenter > radSquared)\n                this.bitmap[alphaIdx] = 0;\n            else if (feathering)\n                this.bitmap[alphaIdx] *= Math.max(0, Math.min(1, 1 - (distanceFromCenter / radSquared) * feathering ** (1 / 2)));\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the images opacity\n     * @param {number} opacity The opacity to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current opacity (false) or just set the new opacity (true)\n     * @returns {Image}\n     */\n    opacity(opacity, absolute = false) {\n        if (isNaN(opacity) || opacity < 0)\n            throw new RangeError('Invalid opacity value');\n\n        this.__set_channel_value__(opacity, absolute, 3);\n\n        return this;\n    }\n\n    /**\n     * Sets the red channels saturation\n     * @param {number} saturation The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    red(saturation, absolute = false) {\n        if (isNaN(saturation) || saturation < 0)\n            throw new RangeError('Invalid saturation value');\n\n        this.__set_channel_value__(saturation, absolute, 0);\n\n        return this;\n    }\n\n    /**\n     * Sets the green channels saturation\n     * @param {number} saturation The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    green(saturation, absolute = false) {\n        if (isNaN(saturation) || saturation < 0)\n            throw new RangeError('Invalid saturation value');\n\n        this.__set_channel_value__(saturation, absolute, 1);\n\n        return this;\n    }\n\n    /**\n     * Sets the blue channels saturation\n     * @param {number} saturation The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    blue(saturation, absolute = false) {\n        if (isNaN(saturation) || saturation < 0)\n            throw new RangeError('Invalid saturation value');\n\n        this.__set_channel_value__(saturation, absolute, 2);\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} value\n     * @param {boolean} absolute\n     * @param {number} offset\n     */\n    __set_channel_value__(value, absolute, offset) {\n        for (let i = offset; i < this.bitmap.length; i += 4)\n            this.bitmap[i] = value * (absolute ? 255 : this.bitmap[i]);\n    }\n\n    /**\n     * Sets the brightness of the image\n     * @param {number} value The lightness to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current lightness (false) or just set the new lightness (true)\n     * @returns {Image}\n     */\n    lightness(value, absolute = false) {\n        if (isNaN(value) || value < 0)\n            throw new RangeError('Invalid lightness value');\n\n        return this.fill((x, y) => {\n            const [h, s, l, a] = Image.rgbaToHSLA(...this.getRGBAAt(x, y));\n            return Image.hslaToColor(h, s, value * (absolute ? 1 : l), a);\n        });\n    }\n\n    /**\n     * Sets the saturation of the image\n     * @param {number} value The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    saturation(value, absolute = false) {\n        if (isNaN(value) || value < 0)\n            throw new RangeError('Invalid saturation value');\n\n        return this.fill((x, y) => {\n            const [h, s, l, a] = Image.rgbaToHSLA(...this.getRGBAAt(x, y));\n            return Image.hslaToColor(h, value * (absolute ? 1 : s), l, a);\n        });\n    }\n\n    /**\n     * Composites (overlays) the source onto this image at the specified coordinates\n     * @param {Image} source The image to place\n     * @param {number} [x=0] The x position to place the image at\n     * @param {number} [y=0] The y position to place the image at\n     * @returns {Image}\n     */\n    composite(source, x = 0, y = 0) {\n        x = ~~x;\n        y = ~~y;\n\n        for (let yy = 0; yy < source.height; yy++) {\n            let y_offset = y + yy;\n            if (y_offset < 0) continue;\n            if (y_offset >= this.height) break;\n\n            for (let xx = 0; xx < source.width; xx++) {\n                let x_offset = x + xx;\n                if (x_offset < 0) continue;\n                if (x_offset >= this.width) break;\n\n                const offset = 4 * (x_offset + y_offset * this.width);\n                const fg = source.__view__.getUint32(4 * (xx + yy * source.width), false);\n                const bg = this.__view__.getUint32(offset, false);\n\n                if ((fg & 0xff) === 0xff) this.__view__.setUint32(offset, fg, false);\n                else if ((fg & 0xff) === 0x00) this.__view__.setUint32(offset, bg, false);\n                else this.__view__.setUint32(offset, Image.__alpha_blend__(fg, bg), false);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} fg\n     * @param {number} bg\n     * @returns {number}\n     */\n    static __alpha_blend__(fg, bg) {\n        const fa = fg & 0xff;\n        const alpha = fa + 1;\n        const inv_alpha = 256 - fa;\n        const r = (alpha * (fg >>> 24) + inv_alpha * (bg >>> 24)) >> 8;\n        const b = (alpha * (fg >> 8 & 0xff) + inv_alpha * (bg >> 8 & 0xff)) >> 8;\n        const g = (alpha * (fg >> 16 & 0xff) + inv_alpha * (bg >> 16 & 0xff)) >> 8;\n        return (((r & 0xff) << 24) | ((g & 0xff) << 16) | ((b & 0xff) << 8) | (Math.max(fa, bg & 0xff) & 0xff));\n    }\n\n    /**\n     * Inverts the images colors\n     * @returns {Image}\n     */\n    invert() {\n        for (const [x, y, color] of this.iterateWithColors())\n            this.__set_pixel__(x, y, ((0xffffffff - color) & 0xffffff00) | (color & 0xff));\n\n        return this;\n    }\n\n    /**\n     * Inverts the images value (lightness)\n     * @returns {Image}\n     */\n    invertValue() {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(h, s, 1 - l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Inverts the images saturation\n     * @returns {Image}\n     */\n    invertSaturation() {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(h, 1 - s, l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Inverts the images hue\n     * @returns {Image}\n     */\n    invertHue() {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(1 - h, s, l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Shifts the images hue\n     * @param {number} degrees How many degrees to shift the hue by\n     */\n    hueShift(degrees) {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(h + degrees / 360, s, l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets the average color of the image\n     * @returns {number}\n     */\n    averageColor() {\n        let colorAvg = [0, 0, 0];\n        let divisor = 0;\n        for (let idx = 0; idx < this.bitmap.length; idx += 4) {\n            const rgba = this.bitmap.subarray(idx, idx + 4);\n            for (let i = 0; i < 3; i++)\n                colorAvg[i] += rgba[i];\n            divisor += rgba[3] / 255;\n        }\n\n        return Image.rgbaToColor(...colorAvg.map(v => v / divisor), 0xff);\n    }\n\n    /**\n     * Gets the images dominant color\n     * @param {boolean} [ignoreBlack=true] Whether to ignore dark colors below the threshold\n     * @param {boolean} [ignoreWhite=true] Whether to ignore light colors above the threshold\n     * @param {number} [bwThreshold=0xf] The black/white threshold (0-64)\n     * @return {number} The images dominant color\n     */\n    dominantColor(ignoreBlack = true, ignoreWhite = true, bwThreshold = 0xf) {\n        const colorCounts = new Array(0x3ffff);\n        for (let i = 0; i < this.bitmap.length; i += 4) {\n            const color = this.__view__.getUint32(i, false);\n            const [h, s, l] = Image.rgbaToHSLA(...Image.colorToRGBA(color)).map(v => (~~(v * 0x3f)));\n            if (ignoreBlack && l < bwThreshold) continue;\n            if (ignoreWhite && l > 0x3f - bwThreshold) continue;\n            const key = h << 12 | s << 6 | l;\n            colorCounts[key] = (colorCounts[key] || 0) + 1;\n        }\n\n        let maxColorCount = -1;\n        let mostProminentValue = 0;\n        colorCounts.forEach((el, i) => {\n            if (el < maxColorCount) return;\n            maxColorCount = el;\n            mostProminentValue = i;\n        });\n\n        if (mostProminentValue === -1)\n            return this.dominantColor(ignoreBlack, ignoreWhite, bwThreshold - 1);\n\n        const h = (mostProminentValue >>> 12) & 0x3f;\n        const s = (mostProminentValue >>> 6) & 0x3f;\n        const l = mostProminentValue & 0x3f;\n\n        return Image.hslaToColor(h / 0x3f, s / 0x3f, l / 0x3f, 1);\n    }\n\n    /**\n     * Rotates the image the given amount of degrees\n     * @param {number} angle The angle to rotate the image for (in degrees)\n     * @param {boolean} resize Whether to resize the image so it fits all pixels or just ignore outlying pixels\n     */\n    rotate(angle, resize = true) {\n        if (angle % 360 === 0) return this;\n        if (angle % 180 === 0) return this.__rotate_180__();\n\n        const rad = Math.PI * (angle / 180);\n\n        const sin = Math.sin(rad);\n        const cos = Math.cos(rad);\n\n        const width = resize\n            ? Math.abs(this.width * sin) + Math.abs(this.height * cos)\n            : this.width;\n        const height = resize\n            ? Math.abs(this.width * cos) + Math.abs(this.height * sin)\n            : this.height;\n\n        const out = new Image(width, height);\n\n        const out_cx = width / 2 - .5;\n        const out_cy = height / 2 - .5;\n        const src_cx = this.width / 2 - .5;\n        const src_cy = this.height / 2 - .5;\n\n        let h = 0;\n        do {\n            let w = 0;\n            const ysin = src_cx - sin * (h - out_cy);\n            const ycos = src_cy + cos * (h - out_cy);\n\n            do {\n                const xf = ysin + cos * (w - out_cx);\n                const yf = ycos + sin * (w - out_cx);\n                Image.__interpolate__(this, out, w, h, xf, yf);\n            } while (w++ < width);\n        } while (h++ < height);\n\n        return this.__apply__(out);\n    }\n\n    /**\n     * @returns {Image}\n     * @private\n     */\n    __rotate_180__() {\n        let offset = 0;\n        this.bitmap.reverse();\n        while (offset < this.bitmap.length) this.bitmap.subarray(offset, offset += 4).reverse();\n\n        return this;\n    }\n\n    /**\n     * @param {Image} src\n     * @param {Image} out\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @private\n     */\n    static __interpolate__(src, out, x0, y0, x1, y1) {\n        const x2 = ~~x1;\n        const y2 = ~~y1;\n        const xq = x1 - x2;\n        const yq = y1 - y2;\n        const out_slice = out.bitmap.subarray(4 * (x0 + y0 * out.width), -4);\n\n        const ref = {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0,\n        };\n\n        Image.__pawn__(x2, y2, (1 - xq) * (1 - yq), ref, src);\n        Image.__pawn__(1 + x2, y2, xq * (1 - yq), ref, src);\n        Image.__pawn__(x2, 1 + y2, (1 - xq) * yq, ref, src);\n        Image.__pawn__(1 + x2, 1 + y2, xq * yq, ref, src);\n\n        out_slice[3] = ref.a;\n        out_slice[0] = ref.r / ref.a;\n        out_slice[1] = ref.g / ref.a;\n        out_slice[2] = ref.b / ref.a;\n    }\n\n    /** @private */\n    static __pawn__(point0, point1, weight, ref, src) {\n        if (\n            point0 > 0\n            && point1 > 0\n            && point0 < src.width\n            && point1 < src.height\n        ) {\n            const offset = 4 * (point0 + point1 * src.width);\n            const src_slice = src.bitmap.subarray(offset, offset + 4);\n\n            const wa = weight * src_slice[3];\n\n            ref.a += wa;\n            ref.r += wa * src_slice[0];\n            ref.g += wa * src_slice[1];\n            ref.b += wa * src_slice[2];\n        }\n    }\n\n    /**\n     * @private\n     * @param {Image|Frame} image\n     * @returns {Image|Frame}\n     */\n    __apply__(image) {\n        this.__width__ = image.__width__;\n        this.__height__ = image.__height__;\n        this.__view__ = image.__view__;\n        this.__u32__ = image.__u32__;\n        this.bitmap = image.bitmap;\n\n        if (image instanceof Frame)\n            return Frame.from(this, image.duration, image.xOffset, image.yOffset, image.disposalMode);\n\n        return this;\n    }\n\n    /**\n     * Creates a multi-point gradient generator\n     * @param {Object<number, number>} colors The gradient points to use (e.g. `{0: 0xff0000ff, 1: 0x00ff00ff}`)\n     * @return {(function(number): number)} The gradient generator. The function argument is the position in the gradient (0..1).\n     */\n    static gradient(colors) {\n        const entries = Object.entries(colors).sort((a, b) => a[0] - b[0]);\n        const positions = entries.map(e => parseFloat(e[0]));\n        const values = entries.map(e => e[1]);\n\n        if (positions.length === 0) throw new RangeError('Invalid gradient point count');\n        else if (positions.length === 1) {\n            return () => values[0];\n        } else if (positions.length === 2) {\n            const gradient = this.__gradient__(values[0], values[1]);\n            return position => {\n                if (position <= positions[0]) return values[0];\n                if (position >= positions[1]) return values[1];\n                return gradient((position - positions[0]) / (positions[1] - positions[0]));\n            };\n        }\n\n        const minDef = Math.min(...positions);\n        const maxDef = Math.max(...positions);\n        let gradients = [];\n\n        for (let i = 0; i < positions.length; i++) {\n            let minPos = positions[i - 1];\n            if (minPos === undefined) continue;\n\n            let maxPos = positions[i];\n\n            let minVal = values[i - 1];\n            if (minVal === undefined) minVal = values[i];\n\n            const maxVal = values[i];\n            const gradient = this.__gradient__(minVal, maxVal);\n\n            gradients.push({min: minPos, max: maxPos, gradient});\n        }\n\n        return position => {\n            if (position <= minDef) return gradients[0].gradient(0);\n            if (position >= maxDef) return gradients[gradients.length - 1].gradient(1);\n\n            for (const gradient of gradients)\n                if (position >= gradient.min && position <= gradient.max)\n                    return gradient.gradient((position - gradient.min) / (gradient.max - gradient.min));\n            throw new RangeError(`Invalid gradient position: ${position}`);\n        };\n    }\n\n    /**\n     * Rounds the images corners\n     * @param {number} [radius=min(width,height)/4] The radius of the corners\n     * @return {Image}\n     */\n    roundCorners(radius = Math.min(this.width, this.height) / 4) {\n        const radSquared = radius ** 2;\n        for (let x = 1; x <= radius; x++) {\n            const xRad = (x - radius) ** 2;\n            for (let y = 1; y <= radius; y++) {\n                if (xRad + (y - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        for (let x = 1; x <= radius; x++) {\n            const xRad = (x - radius) ** 2;\n            for (let y = this.height - radius; y <= this.height; y++) {\n                if (xRad + ((this.height - y) - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        for (let x = this.width - radius; x <= this.width; x++) {\n            const xRad = ((this.width - x) - radius) ** 2;\n            for (let y = 1; y <= radius; y++) {\n                if (xRad + (y - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        for (let x = this.width - radius; x <= this.width; x++) {\n            const xRad = ((this.width - x) - radius) ** 2;\n            for (let y = this.height - radius; y <= this.height; y++) {\n                if (xRad + ((this.height - y) - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    static __gradient__(startColor, endColor) {\n        const sr = startColor >>> 24;\n        const sg = startColor >> 16 & 0xff;\n        const sb = startColor >> 8 & 0xff;\n        const sa = startColor & 0xff;\n        const er = (endColor >>> 24) - sr;\n        const eg = (endColor >> 16 & 0xff) - sg;\n        const eb = (endColor >> 8 & 0xff) - sb;\n        const ea = (endColor & 0xff) - sa;\n\n        return position => {\n            const r = sr + position * er;\n            const g = sg + position * eg;\n            const b = sb + position * eb;\n            const a = sa + position * ea;\n            return (((r & 0xff) << 24) | ((g & 0xff) << 16) | ((b & 0xff) << 8) | (a & 0xff));\n        };\n    }\n\n    fisheye(radius = 2) {\n        const r = new Image(this.width, this.height);\n\n        const w = this.width;\n        const h = this.height;\n        const tu32 = this.__u32__;\n        const ru32 = r.__u32__;\n        const iw = 1 / w;\n        const ih = 1 / h;\n\n        for (const [x, y] of this) {\n            const xco = x * iw - .5;\n            const yco = y * ih - .5;\n            const dfc = Math.sqrt(xco ** 2 + yco ** 2);\n            const dis = 2 * dfc ** radius;\n            const nx = ((dis * xco / dfc + 0.5) * w) | 0;\n            const ny = ((dis * yco / dfc + 0.5) * h) | 0;\n\n            if (nx < 1 || nx > w || ny < 1 || ny > h || isNaN(nx) || isNaN(ny))\n                continue;\n\n            ru32[y * w + x] = tu32[w * ny + nx];\n        }\n\n        const cO = tu32.length * .5 + w / 2;\n        ru32[cO] = tu32[cO];\n\n        return this.__apply__(r);\n    }\n\n    /**\n     * @typedef {object} PNGMetadata\n     * @property {string} [title] The images title\n     * @property {string} [author] The images author\n     * @property {string} [description] The images description\n     * @property {string} [copyright] The images copyright info\n     * @property {string|number|Date} [creationTime=Date.now()] The images creation timestamp\n     * @property {string} [software=\"github.com/matmen/ImageScript vX.X.X\"] The software used to create this image\n     * @property {string} [disclaimer] A disclaimer for the image\n     * @property {string} [warning] A warning for the image\n     * @property {string} [source] The images source\n     * @property {string} [comment] A comment for the image\n     */\n\n    /**\n     * Encodes the image into a PNG\n     * @param {number} compression The compression level to use (0-9)\n     * @param {PNGMetadata} [meta={}] Image metadata\n     * @return {Promise<Uint8Array>} The encoded data\n     */\n    async encode(compression = 1, {\n        title,\n        author,\n        description,\n        copyright,\n        creationTime,\n        software,\n        disclaimer,\n        warning,\n        source,\n        comment\n    } = {}) {\n        return png.encode(this.bitmap, {\n            width: this.width,\n            height: this.height,\n            level: compression,\n            channels: 4,\n            text: {\n                Title: title,\n                Author: author,\n                Description: description,\n                Copyright: copyright,\n                'Creation Time': new Date(creationTime === undefined ? Date.now() : creationTime).toUTCString(),\n                Software: software === undefined ? `github.com/matmen/ImageScript v${version}` : software,\n                Disclaimer: disclaimer,\n                Warning: warning,\n                Source: source,\n                Comment: comment\n            }\n        });\n    }\n\n    /**\n     * Encodes the image into a JPEG\n     * @param {number} [quality=90] The JPEG quality to use (1-100)\n     * @return {Promise<Uint8Array>}\n     */\n    async encodeJPEG(quality = 90) {\n        return (await jpeglib.init()).encode(this.bitmap, this.width, this.height, quality);\n    }\n\n    /**\n     * Decodes an image (PNG, JPEG or TIFF)\n     * @param {Buffer|Uint8Array} data The binary data to decode\n     * @return {Promise<Image>} The decoded image\n     */\n    static async decode(data) {\n        let image;\n\n        data = mem.view(data);\n        const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n        if (ImageType.isPNG(view)) { // PNG\n            const {width, height, pixels} = png.decode(data);\n            image = new Image(width, height);\n            image.bitmap.set(pixels);\n        } else if (ImageType.isJPEG(view)) { // JPEG\n            const framebuffer = (await jpeglib.init()).decode(data);\n\n            const width = framebuffer.width;\n            const height = framebuffer.height;\n            const pixelType = framebuffer.format;\n\n            image = new Image(width, height);\n            const buffer = framebuffer.buffer;\n\n            if (pixelType === 0) {\n                const view = new DataView(image.bitmap.buffer);\n\n                for (let i = 0; i < buffer.length; i++) {\n                    const pixel = buffer[i];\n                    view.setUint32(i * 4, pixel << 24 | pixel << 16 | pixel << 8 | 0xff, false);\n                }\n            } else if (pixelType === 1) {\n                image.bitmap.fill(0xff);\n                for (let i = 0; i < width * height; i++)\n                    image.bitmap.set(buffer.subarray(i * 3, i * 3 + 3), i * 4);\n            } else if (pixelType === 2) {\n                for (let i = 0; i < buffer.length; i += 4) {\n                    image.bitmap[i] = 0xff * (1 - buffer[i] / 0xff) * (1 - buffer[i + 3] / 0xff);\n                    image.bitmap[i + 1] = 0xff * (1 - buffer[i + 1] / 0xff) * (1 - buffer[i + 3] / 0xff);\n                    image.bitmap[i + 2] = 0xff * (1 - buffer[i + 2] / 0xff) * (1 - buffer[i + 3] / 0xff);\n                    image.bitmap[i + 3] = 0xff;\n                }\n            }\n        } else if (ImageType.isTIFF(view)) { // TIFF\n            const framebuffer = (await tifflib.init()).decode(data);\n            image = new Image(framebuffer.width, framebuffer.height);\n\n            image.bitmap.set(framebuffer.buffer);\n        } else throw new Error('Unsupported image type');\n\n        return image;\n    }\n\n    /**\n     * Scale the SVG by the given amount. For use with {@link Image.renderSVG}\n     * @return {number}\n     */\n    static get SVG_MODE_SCALE() {\n        return 1;\n    }\n\n    /**\n     * Scale the SVG to fit the given width. For use with {@link Image.renderSVG}\n     * @return {number}\n     */\n    static get SVG_MODE_WIDTH() {\n        return 2;\n    }\n\n    /**\n     * Scale the SVG to fit the given height. For use with {@link Image.renderSVG}\n     * @return {number}\n     */\n    static get SVG_MODE_HEIGHT() {\n        return 3;\n    }\n\n    /**\n     * Creates a new image from the given SVG\n     * @param {string} svg The SVG content\n     * @param {number} size The size to use\n     * @param {number} mode The SVG resizing mode to use (one of {@link SVG_MODE_SCALE}, {@link SVG_MODE_WIDTH}, {@link SVG_MODE_HEIGHT})\n     * @return {Promise<Image>} The rendered SVG graphic\n     */\n    static async renderSVG(svg, size = 1, mode = this.SVG_MODE_SCALE) {\n        if (![this.SVG_MODE_WIDTH, this.SVG_MODE_HEIGHT, this.SVG_MODE_SCALE].includes(mode))\n            throw new Error('Invalid SVG scaling mode');\n\n        if (mode === this.SVG_MODE_SCALE && size <= 0)\n            throw new RangeError('SVG scale must be > 0');\n        if (mode !== this.SVG_MODE_SCALE && size < 1)\n            throw new RangeError('SVG size must be >= 1')\n\n        if (typeof svg === 'string') svg = new TextEncoder().encode(svg);\n        const framebuffer = (await svglib.init()).rasterize(svg, mode, size);\n\n        const image = new Image(framebuffer.width, framebuffer.height);\n\n        image.bitmap.set(framebuffer.buffer);\n\n        return image;\n    }\n\n    /**\n     * Creates a new image containing the rendered text.\n     * @param {Uint8Array} font TrueType (ttf/ttc) or OpenType (otf) font buffer to use\n     * @param {number} scale Font size to use\n     * @param {string} text Text to render\n     * @param {number} [color=0xffffffff] Text color to use\n     * @param {TextLayout} [layout] The text layout to use\n     * @return {Promise<Image>} The rendered text\n     */\n    static async renderText(font, scale, text, color = 0xffffffff, layout = new TextLayout()) {\n        const { Font, Layout } = await fontlib.init();\n\n        font = new Font(scale, font);\n        const [r, g, b, a] = Image.colorToRGBA(color);\n\n        const layoutOptions = new Layout();\n\n        layoutOptions.reset({\n            max_width: layout.maxWidth,\n            max_height: layout.maxHeight,\n            wrap_style: layout.wrapStyle,\n            vertical_align: layout.verticalAlign,\n            horizontal_align: layout.horizontalAlign,\n            wrap_hard_breaks: layout.wrapHardBreaks\n        });\n\n        layoutOptions.append(font, text, {scale});\n        const framebuffer = layoutOptions.rasterize(r, g, b);\n        const image = new Image(framebuffer.width, framebuffer.height);\n\n        image.bitmap.set(framebuffer.buffer);\n\n        if (image.height > layout.maxHeight)\n            image.crop(0, 0, image.width, Math.floor(layoutOptions.lines() / image.height * layout.maxHeight) * (image.height / layoutOptions.lines()));\n\n        font.free();\n        layoutOptions.free();\n        return image.opacity(a / 0xff);\n    }\n\n}\n\n/**\n * Represents a frame in a GIF\n * @extends Image\n */\n class Frame extends Image {\n    /**\n     * GIF frame disposal mode KEEP. For use with {@link Frame}\n     * @returns {string}\n     */\n    static get DISPOSAL_KEEP() {\n        return 'keep';\n    }\n\n    /**\n     * GIF frame disposal mode PREVIOUS. For use with {@link Frame}\n     * @returns {string}\n     */\n    static get DISPOSAL_PREVIOUS() {\n        return 'previous';\n    }\n\n    /**\n     * GIF frame disposal mode BACKGROUND. For use with {@link Frame}\n     * @returns {string}\n     */\n    static get DISPOSAL_BACKGROUND() {\n        return 'background';\n    }\n\n    static __convert_disposal_mode__(mode) {\n        if (typeof mode === 'string')\n            mode = ['any', 'keep', 'previous', 'background'].indexOf(mode);\n        if (mode < 0 || mode > 3)\n            throw new RangeError('Invalid disposal mode');\n\n        return mode;\n    }\n\n    /**\n     * Creates a new, blank frame\n     * @param {number} width\n     * @param {number} height\n     * @param {number} [duration = 100] The frames duration (in ms)\n     * @param {number} [xOffset=0] The frames offset on the x-axis\n     * @param {number} [yOffset=0] The frames offset on the y-axis\n     * @param {string|number} [disposalMode=Frame.DISPOSAL_KEEP] The frame's disposal mode ({@link Frame.DISPOSAL_KEEP}, {@link Frame.DISPOSAL_PREVIOUS} or {@link Frame.DISPOSAL_BACKGROUND})\n     * @return {Frame}\n     */\n    constructor(width, height, duration = 100, xOffset = 0, yOffset = 0, disposalMode = Frame.DISPOSAL_KEEP) {\n        if (isNaN(duration) || duration < 0)\n            throw new RangeError('Invalid frame duration');\n\n        super(width, height);\n        this.duration = duration;\n        this.xOffset = xOffset;\n        this.yOffset = yOffset;\n        this.disposalMode = disposalMode;\n    }\n\n    /**\n     * The Frame's disposal mode\n     * @returns {number}\n     */\n    get disposalMode() {\n        return this.__disposalMode__;\n    }\n\n    /**\n     * Sets the frame's disposal mode, converting it to the internal numeric value.\n     * @param {string|number} disposalMode The frame's disposal mode\n     */\n    set disposalMode(disposalMode) {\n        this.__disposalMode__ = Frame.__convert_disposal_mode__(disposalMode);\n    }\n\n    toString() {\n        return `Frame<${this.width}x${this.height}x${this.duration}ms>`;\n    }\n\n    /**\n     * Converts an Image instance to a Frame, cloning it in the process\n     * @param {Image} image The image to create the frame from\n     * @param {number} [duration = 100] The frames duration (in ms)\n     * @param {number} [xOffset=0] The frames offset on the x-axis\n     * @param {number} [yOffset=0] The frames offset on the y-axis\n     * @param {string|number} [disposalMode=Frame.DISPOSAL_KEEP] The frames disposal mode ({@link Frame.DISPOSAL_KEEP}, {@link Frame.DISPOSAL_PREVIOUS} or {@link Frame.DISPOSAL_BACKGROUND})\n     * @return {Frame}\n     */\n    static from(image, duration, xOffset, yOffset, disposalMode = Frame.DISPOSAL_KEEP) {\n        if (!(image instanceof Image))\n            throw new TypeError('Invalid image passed');\n\n        const frame = new Frame(image.width, image.height, duration, xOffset, yOffset, disposalMode);\n        frame.bitmap.set(image.bitmap);\n\n        return frame;\n    }\n\n    resize(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const originalWidth = this.width;\n        const originalHeight = this.height;\n\n        const result = super.resize(width, height, mode);\n\n        this.xOffset *= result.width / originalWidth;\n        this.yOffset *= result.height / originalHeight;\n\n        return result;\n    }\n}\n\n/**\n * Represents a GIF image as an array of frames\n * @extends Array<Frame>\n */\nclass GIF extends Array {\n    /**\n     * Creates a new GIF image.\n     * @param {Frame[]} frames The frames to create the GIF from\n     * @param {number} [loopCount=-1] How often to loop the GIF for (-1 = unlimited)\n     * @property {number} loopCount How often the GIF will loop for\n     */\n    constructor(frames, loopCount = -1) {\n        super(...frames);\n\n        for (const frame of this)\n            if (!(frame instanceof Frame))\n                throw new TypeError(`Frame ${this.indexOf(frame)} is not an instance of Frame`);\n\n        if (loopCount < -1 || isNaN(loopCount))\n            throw new RangeError('Invalid loop count');\n\n        this.loopCount = loopCount;\n    }\n\n    /**\n     * The GIFs width\n     * @returns {number}\n     */\n    get width() {\n        let max = 0;\n        for (const frame of this) {\n            let width = frame.width + frame.xOffset;\n            if (max < width)\n                max = width;\n        }\n\n        return max;\n    }\n\n    /**\n     * The GIFs height\n     * @returns {number}\n     */\n    get height() {\n        let max = 0;\n        for (const frame of this) {\n            let height = frame.height + frame.yOffset;\n            if (max < height)\n                max = height;\n        }\n\n        return max;\n    }\n\n    toString() {\n        return `GIF<${this.width}x${this.height}x${this.duration}ms>`;\n    }\n\n    /**\n     * @returns {Generator<Frame, void, *>}\n     */\n    * [Symbol.iterator]() {\n        for (let i = 0; i < this.length; i++)\n            yield this[i];\n    }\n\n    slice(start, end) {\n        if (end === Infinity)\n            end = this.length;\n        const frames = new Array(end - start);\n        for (let i = 0; i < frames.length; i++)\n            frames[i] = this[i + start];\n        return new GIF(frames, this.loopCount);\n    }\n\n    /**\n     * The GIFs duration (in ms)\n     * @return {number}\n     */\n    get duration() {\n        return this.reduce((acc, frame) => acc + frame.duration, 0);\n    }\n\n    /**\n     * Encodes the image into a GIF\n     * @param {number} [quality=95] GIF quality 0-100\n     * @return {Promise<Uint8Array>} The encoded data\n     */\n    async encode(quality = 95) {\n        const encoder = new (await giflib.init()).Encoder(this.width, this.height, this.loopCount);\n\n        for (const frame of this) {\n            if (!(frame instanceof Frame)) throw new Error('GIF contains invalid frames');\n            encoder.add(frame.xOffset, frame.yOffset, ~~(frame.duration / 10), frame.width, frame.height, frame.bitmap, frame.disposalMode, quality / 100 * 29 + 1);\n        }\n\n        return encoder.u8();\n    }\n\n    /**\n     * Decodes a GIF image\n     * @param {Buffer|Uint8Array} data The binary data to decode\n     * @param {boolean} [onlyExtractFirstFrame=false] Whether to end GIF decoding after the first frame\n     * @return {Promise<GIF>} The decoded GIF\n     */\n    static async decode(data, onlyExtractFirstFrame = false) {\n        let image;\n        data = mem.view(data);\n        const view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n\n        if (ImageType.isGIF(view)) { // GIF\n            const frames = [];\n            const decoder = new (await giflib.init()).Decoder(data);\n\n            if (onlyExtractFirstFrame) {\n                const first = decoder.frames().next().value;\n                const frame = new Frame(first.width, first.height, 10 * first.delay, first.x, first.y, first.dispose);\n\n                frame.bitmap.set(first.buffer);\n\n                frames.push(frame);\n                image = new GIF(frames);\n            }\n\n            const gwidth = decoder.width | 0;\n            const gheight = decoder.height | 0;\n            const u32 = new Uint32Array(decoder.width * decoder.height);\n            const u8 = new Uint8Array(u32.buffer, u32.byteOffset, u32.byteLength);\n\n            for (const frame of decoder.frames()) {\n                let offset8 = 0 | 0;\n                let offset32 = 0 | 0;\n                const fx = frame.x | 0;\n                const fy = frame.y | 0;\n                const f8 = frame.buffer;\n                const mode = frame.dispose;\n                const width = frame.width | 0;\n                const height = frame.height | 0;\n                const f32 = new Uint32Array(f8.buffer, f8.byteOffset, width * height);\n                const f = frames[frames.push(new Frame(gwidth, gheight, 10 * frame.delay, 0, 0, 3)) - 1];\n\n                const t8 = f.bitmap;\n                const t32 = new Uint32Array(t8.buffer);\n\n                t8.set(u8);\n\n                if (2 === mode) {\n                    for (let y = 0 | 0; y < height; y++) {\n                        const y_offset = fx + gwidth * (y + fy) | 0;\n\n                        for (let x = 0 | 0; x < width; x++) {\n                            const x_offset = x + y_offset;\n\n                            if (0 === f8[3 + offset8])\n                            t32[x_offset] = u32[x_offset];\n                            else t32[x_offset] = f32[offset32];\n\n                            offset32++;\n                            offset8 += 4;\n                        }\n                    }\n                }\n\n                else if (3 === mode) {\n                    for (let y = 0 | 0; y < height; y++) {\n                        const y_offset = fx + gwidth * (y + fy) | 0;\n\n                        for (let x = 0 | 0; x < width; x++) {\n                            const x_offset = x + y_offset;\n\n                            if (0 === f8[3 + offset8])\n                            t32[x_offset] = u32[x_offset];\n                            else t32[x_offset] = f32[offset32];\n\n                            offset32++;\n                            offset8 += 4;\n                            u32[x_offset] = 0;\n                        }\n                    }\n                }\n\n                else if (0 === mode || 1 === mode) {\n                    t8.set(u8);\n                    for (let y = 0 | 0; y < height; y++) {\n                        const y_offset = fx + gwidth * (y + fy) | 0;\n\n                        for (let x = 0 | 0; x < width; x++) {\n                            const x_offset = x + y_offset;\n\n                            if (0 === f8[3 + offset8])\n                            t32[x_offset] = u32[x_offset];\n                            else t32[x_offset] = f32[offset32];\n\n                            offset32++;\n                            offset8 += 4;\n                            u32[x_offset] = t32[x_offset];\n                        }\n                    }\n                }\n            }\n\n            image = new GIF(frames);\n        } else throw new Error('Unsupported image type');\n\n        return image;\n    }\n\n    resize(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        for (const frame of this)\n            frame.resize(width, height, mode);\n    }\n}\n\nclass TextLayout {\n    /**\n     * Layout options for {@link renderText}\n     * @param {object} [options]\n     * @param {number} [options.maxWidth=Infinity] The texts max width\n     * @param {number} [options.maxHeight=Infinity] The texts max height\n     * @param {string} [options.wrapStyle='word'] The texts wrap style when reaching the max width (word, char)\n     * @param {string} [options.verticalAlign='left'] The vertical align mode (left, center, right)\n     * @param {string} [options.horizontalAlign='top'] The horizontal align mode (top, middle, bottom)\n     * @param {string} [options.wrapHardBreaks=true] Whether to force wrap at new line characters\n     */\n    constructor(options) {\n        const {maxWidth, maxHeight, wrapStyle, verticalAlign, horizontalAlign, wrapHardBreaks} = options || {};\n\n        this.maxWidth = maxWidth || Infinity;\n        if (isNaN(this.maxWidth) || this.maxWidth < 1)\n            throw new RangeError('Invalid maxWidth');\n\n        this.maxHeight = maxHeight || Infinity;\n        if (isNaN(this.maxHeight) || this.maxHeight < 1)\n            throw new RangeError('Invalid maxHeight');\n\n        this.wrapStyle = wrapStyle || 'word';\n        if (!['word', 'char'].includes(this.wrapStyle))\n            throw new RangeError('Invalid wrapStyle');\n\n        this.verticalAlign = verticalAlign || 'left';\n        if (!['left', 'center', 'right'].includes(this.verticalAlign))\n            throw new RangeError('Invalid verticalAlign');\n\n        this.horizontalAlign = horizontalAlign || 'top';\n        if (!['top', 'middle', 'bottom'].includes(this.horizontalAlign))\n            throw new RangeError('Invalid horizontalAlign');\n\n        this.wrapHardBreaks = typeof wrapHardBreaks === 'undefined' ? true : wrapHardBreaks;\n        if (typeof this.wrapHardBreaks !== 'boolean')\n            throw new TypeError('Invalid wrapHardBreaks');\n    }\n}\n\nclass ImageType {\n    /**\n     * Gets an images type (png, jpeg, tiff, gif)\n     * @param {Buffer|Uint8Array} data The image binary to get the type of\n     * @returns {string|null} The image type (png, jpeg, tiff, gif, null)\n     */\n    static getType(data) {\n        let view;\n        if (!ArrayBuffer.isView(data)) {\n            data = new Uint8Array(data);\n            view = new DataView(data.buffer);\n        } else {\n            data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n            view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        }\n\n        if (this.isPNG(view)) return 'png';\n        if (this.isJPEG(view)) return 'jpeg';\n        if (this.isTIFF(view)) return 'tiff';\n        if (this.isGIF(view)) return 'gif';\n        return null;\n    }\n\n    /**\n     * @param {DataView} view\n     * @returns {boolean}\n     */\n    static isPNG(view) {\n        return view.byteLength >= 4 && view.getUint32(0, false) === MAGIC_NUMBERS.PNG;\n    }\n\n    /**\n     * @param {DataView} view\n     * @returns {boolean}\n     */\n    static isJPEG(view) {\n        return view.byteLength >= 4 && (view.getUint32(0, false) >>> 8) === MAGIC_NUMBERS.JPEG;\n    }\n\n    /**\n     * @param {DataView} view\n     * @returns {boolean}\n     */\n    static isTIFF(view) {\n        return view.byteLength >= 4 && view.getUint32(0, false) === MAGIC_NUMBERS.TIFF;\n    }\n\n    /**\n     * @param {DataView} view\n     * @returns {boolean}\n     */\n    static isGIF(view) {\n        return view.byteLength >= 4 && (view.getUint32(0, false) >>> 8) === MAGIC_NUMBERS.GIF;\n    }\n}\n\n/**\n * Decodes the given image binary\n * @param {Uint8Array|Buffer} data The image data\n * @param {boolean} [onlyExtractFirstFrame] Whether to end GIF decoding after the first frame\n * @returns {Promise<GIF|Image>} The decoded image\n */\nfunction decode(data, onlyExtractFirstFrame) {\n    const type = ImageType.getType(data);\n\n    if (type === 'gif')\n        return GIF.decode(data, onlyExtractFirstFrame);\n    return Image.decode(data);\n}\n\nmodule.exports = {Image, GIF, Frame, TextLayout, ImageType, decode};\n","function view(buffer, shared = false) {\n    if (buffer instanceof ArrayBuffer) return new Uint8Array(buffer);\n    if (typeof SharedArrayBuffer !== 'undefined' && shared && buffer instanceof SharedArrayBuffer)\n        return new Uint8Array(buffer);\n    if (ArrayBuffer.isView(buffer)) return new Uint8Array(buffer.buffer, buffer.byteOffset, buffer.byteLength);\n\n    throw new TypeError(\"The provided value is not of type '(ArrayBuffer or ArrayBufferView)'\");\n  }\n\n  function from_parts(buffers, shared = false) {\n    let length = 0;\n    let offset = 0;\n    buffers.forEach(buffer => length += (null == buffer.byteLength ? buffer.length : buffer.byteLength));\n\n    const u8 = new Uint8Array(shared ? new SharedArrayBuffer(length) : length);\n\n    buffers.forEach(buffer => {\n      const ref = Array.isArray(buffer) ? buffer : view(buffer, true);\n\n      u8.set(ref, offset);\n      offset += ref.length;\n    });\n\n    return u8;\n  }\n\n  module.exports = { view, from_parts };\n","const table = new Uint32Array([\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3, 0x0EDB8832,\n    0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2,\n    0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7, 0x136C9856, 0x646BA8C0, 0xFD62F97A,\n    0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3,\n    0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423,\n    0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB,\n    0xB6662D3D, 0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 0x6B6B51F4,\n    0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,\n    0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 0x4DB26158, 0x3AB551CE, 0xA3BC0074,\n    0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525,\n    0x206F85B3, 0xB966D409, 0xCE61E49F, 0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,\n    0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615,\n    0x73DC1683, 0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 0xFED41B76,\n    0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E,\n    0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6,\n    0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7,\n    0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F,\n    0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7,\n    0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 0xA00AE278,\n    0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC,\n    0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 0xBDBDF21C, 0xCABAC28A, 0x53B39330,\n    0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D]);\n  \n  module.exports = function crc32(buffer) {\n    let offset = 0 | 0;\n    let crc = 0xFFFFFFFF | 0;\n    const bl = (buffer.length - 4) | 0;\n  \n    while (bl > offset) {\n      crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n      crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n      crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n      crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n    }\n  \n    while (offset < buffer.length) {\n      crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n    }\n  \n    return (crc ^ 0xFFFFFFFF) >>> 0;\n  };","/* global SharedArrayBuffer */\nconst mem = require('./buffer.js');\nconst crc32 = require('./crc32.js');\nconst { compress, decompress } = require('./zlib.js');\n\nconst __IHDR__ = new Uint8Array([73, 72, 68, 82]);\nconst __IDAT__ = new Uint8Array([73, 68, 65, 84]);\nconst __IEND__ = new Uint8Array([73, 69, 78, 68]);\nconst __IEND_CRC__ = crc32(new Uint8Array([73, 69, 78, 68]));\nconst HEAD = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);\n\nconst color_types = {\n  GREYSCALE: 0,\n  TRUECOLOR: 2,\n  INDEXED_COLOR: 3,\n  GREYSCALE_ALPHA: 4,\n  TRUECOLOR_ALPHA: 6\n};\n\nconst channels_to_color_type = {\n  1: color_types.GREYSCALE,\n  2: color_types.GREYSCALE_ALPHA,\n\n  3: color_types.TRUECOLOR,\n  4: color_types.TRUECOLOR_ALPHA\n};\n\nconst utf8encoder = new TextEncoder; // replace with latin1 encoder or iext\n\nmodule.exports = {\n  encode(data, { text, width, height, channels, depth = 8, level = 0 }) {\n    let offset = 0;\n    let tmp_offset = 0;\n    const row_length = width * channels;\n    const tmp = new Uint8Array(height + data.length);\n\n    while (offset < data.length) {\n      tmp[tmp_offset++] = 0;\n      tmp.set(data.subarray(offset, (offset += row_length)), tmp_offset);\n\n      tmp_offset += row_length;\n    }\n\n    if (text) {\n      let chunks = [];\n      for (const key in text) {\n        if (!text[key]) continue;\n        const kb = utf8encoder.encode(key);\n        const tb = utf8encoder.encode(text[key]);\n        const chunk = new Uint8Array(1 + 12 + kb.length + tb.length);\n\n        const view = new DataView(chunk.buffer);\n\n        chunk[4] = 0x74;\n        chunk[5] = 0x45;\n        chunk[6] = 0x58;\n        chunk[7] = 0x74;\n        chunk.set(kb, 8);\n        chunks.push(chunk);\n        chunk.set(tb, 9 + kb.length);\n        view.setUint32(0, chunk.length - 12);\n        view.setUint32(chunk.length - 4, crc32(chunk.subarray(4, chunk.length - 4)));\n      }\n\n      text = mem.from_parts(chunks);\n    }\n\n    offset = text ? text.length : 0;\n    const compressed = compress(tmp, level);\n    const array = new Uint8Array(49 + offset + HEAD.length + compressed.length);\n\n    array[26] = 0;\n    array[27] = 0;\n    array[28] = 0;\n    array[24] = depth;\n    array.set(HEAD, 0);\n    array.set(__IHDR__, 12);\n    array.set(__IDAT__, 37);\n    array.set(compressed, 41);\n    array[25] = channels_to_color_type[channels];\n    if (text) array.set(text, 45 + compressed.length);\n    array.set(__IEND__, 49 + offset + compressed.length);\n\n    const view = new DataView(array.buffer);\n\n    view.setUint32(8, 13);\n    view.setUint32(16, width);\n    view.setUint32(20, height);\n    view.setUint32(33, compressed.length);\n    view.setUint32(45 + offset + compressed.length, 0);\n    view.setUint32(53 + offset + compressed.length, __IEND_CRC__);\n    view.setUint32(29, crc32(new Uint8Array(array.buffer, 12, 17)));\n    view.setUint32(41 + compressed.length, crc32(new Uint8Array(array.buffer, 37, 4 + compressed.length)));\n\n    return array;\n  },\n\n  decode(array) {\n    let view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n\n    const width = view.getUint32(16);\n    const height = view.getUint32(20);\n    let bit_depth = array[24];\n    const color_type = array[25];\n    let channels = ({ 3: 1, 0: 1, 4: 2, 2: 3, 6: 4 })[color_type];\n    const bytespp = channels * bit_depth / 8;\n\n    const row_length = width * bytespp;\n    let pixels = new Uint8Array(height * row_length);\n\n    let offset = 0;\n    let p_offset = 0;\n\n    let c_offset = 33;\n    const chunks = [];\n\n    let palette, alphaPalette;\n\n    const maxSearchOffset = array.length - 5;\n\n    let type;\n    while ((type = view.getUint32(4 + c_offset)) !== 1229278788) { // IEND\n      if (type === 1229209940) // IDAT\n        chunks.push(array.subarray(8 + c_offset, 8 + c_offset + view.getUint32(c_offset)));\n      else if (type === 1347179589) { // PLTE\n        if (palette)\n          throw new Error('PLTE can only occur once in an image');\n        palette = new Uint32Array(view.getUint32(c_offset));\n        for (let pxlOffset = 0; pxlOffset < palette.length * 8; pxlOffset += 3)\n          palette[pxlOffset / 3] = array[8 + c_offset + pxlOffset] << 24 | array[8 + c_offset + pxlOffset + 1] << 16 | array[8 + c_offset + pxlOffset + 2] << 8 | 0xff;\n      } else if (type === 1951551059) { // tRNS\n        if (alphaPalette)\n          throw new Error('tRNS can only occur once in an image');\n        alphaPalette = new Uint8Array(view.getUint32(c_offset));\n        for (let i = 0; i < alphaPalette.length; i++)\n          alphaPalette[i] = array[8 + c_offset + i];\n      }\n\n      c_offset += 4 + 4 + 4 + view.getUint32(c_offset);\n      if (c_offset > maxSearchOffset) // missing IEND\n        break;\n    }\n\n    array = decompress(chunks.length === 1 ? chunks[0] : mem.from_parts(chunks), height + height * row_length);\n\n    while (offset < array.byteLength) {\n      const filter = array[offset++];\n      const slice = array.subarray(offset, offset += row_length);\n\n      if (0 === filter) pixels.set(slice, p_offset);\n      else if (1 === filter) this.filter_1(slice, pixels, p_offset, bytespp, row_length);\n      else if (2 === filter) this.filter_2(slice, pixels, p_offset, bytespp, row_length);\n      else if (3 === filter) this.filter_3(slice, pixels, p_offset, bytespp, row_length);\n      else if (4 === filter) this.filter_4(slice, pixels, p_offset, bytespp, row_length);\n\n      p_offset += row_length;\n    }\n\n    if (color_type === 3) {\n      if (!palette)\n        throw new Error('Indexed color PNG has no PLTE');\n\n      if (alphaPalette)\n        for (let i = 0; i < alphaPalette.length; i++)\n          palette[i] &= 0xffffff00 | alphaPalette[i];\n\n      const newPixels = new Uint8Array(width * height * 4);\n      const pixelView = new DataView(newPixels.buffer, newPixels.byteOffset, newPixels.byteLength);\n      for (let i = 0; i < pixels.length * (8 / bit_depth); i++)\n        pixelView.setUint32(i * 4, palette[pixels[~~(i / (8 / bit_depth))] & (2**bit_depth-1)], false);\n      channels = 4;\n      bit_depth = 8;\n      pixels = newPixels;\n    }\n\n    if (bit_depth !== 8) {\n      const newPixels = new Uint8Array(pixels.length / bit_depth * 8);\n      for (let i = 0; i < pixels.length; i += 2)\n        newPixels[i / 2] = pixels[i];\n      pixels = newPixels;\n    }\n\n    if (channels !== 4) {\n      const newPixels = new Uint8Array(width * height * 4);\n      const view = new DataView(newPixels.buffer);\n\n      if (channels === 1) {\n        for (let i = 0; i < width * height; i++) {\n          const pixel = pixels[i];\n          view.setUint32(i * 4, pixel << 24 | pixel << 16 | pixel << 8 | 0xff, false);\n        }\n      } else if (channels === 2) {\n        for (let i = 0; i < width * height * 2; i += 2) {\n          const pixel = pixels[i];\n          view.setUint32(i * 2, pixel << 24 | pixel << 16 | pixel << 8 | pixels[i + 1], false);\n        }\n      } else if (channels === 3) {\n        newPixels.fill(0xff);\n        for (let i = 0; i < width * height; i++)\n          newPixels.set(pixels.subarray(i * 3, i * 3 + 3), i * 4);\n      }\n\n      pixels = newPixels;\n    }\n\n    return { width, height, pixels };\n  },\n\n  filter_1(slice, pixels, p_offset, bytespp, row_length) {\n    let i = 0;\n    while (i < bytespp) pixels[i + p_offset] = slice[i++];\n    while (i < row_length) pixels[i + p_offset] = slice[i] + pixels[i++ + p_offset - bytespp];\n  },\n\n  filter_2(slice, pixels, p_offset, bytespp, row_length) {\n    if (0 === p_offset) pixels.set(slice, p_offset);\n    else {\n      let i = 0;\n      while (i < row_length) pixels[i + p_offset] = slice[i] + pixels[i++ + p_offset - row_length];\n    }\n  },\n\n  filter_3(slice, pixels, p_offset, bytespp, row_length) {\n    let i = 0;\n\n    if (0 === p_offset) {\n      while (i < bytespp) pixels[i] = slice[i++];\n      while (i < row_length) pixels[i] = slice[i] + (pixels[i++ - bytespp] >> 1);\n    } else {\n      while (i < bytespp) pixels[i + p_offset] = slice[i] + (pixels[i++ + p_offset - row_length] >> 1);\n      while (i < row_length) pixels[i + p_offset] = slice[i] + (pixels[i + p_offset - bytespp] + pixels[i++ + p_offset - row_length] >> 1);\n    }\n  },\n\n  filter_4(slice, pixels, p_offset, bytespp, row_length) {\n    let i = 0;\n\n    if (0 === p_offset) {\n      while (i < bytespp) pixels[i] = slice[i++];\n      while (i < row_length) pixels[i] = slice[i] + pixels[i++ - bytespp];\n    } else {\n      while (i < bytespp) pixels[i + p_offset] = slice[i] + pixels[i++ + p_offset - row_length];\n\n      while (i < row_length) {\n        const a = pixels[i + p_offset - bytespp];\n        const b = pixels[i + p_offset - row_length];\n        const c = pixels[i + p_offset - bytespp - row_length];\n\n        const p = a + b - c;\n        const pa = Math.abs(p - a);\n        const pb = Math.abs(p - b);\n        const pc = Math.abs(p - c);\n\n        pixels[i + p_offset] = slice[i++] + ((pa <= pb && pa <= pc) ? a : ((pb <= pc) ? b : c));\n      }\n    }\n  }\n};\n","const { version } = require('../../package.json');\n\nlet mod = null;\nmodule.exports = {\n  async init() {\n    if (!mod) {\n      const streaming = 'compileStreaming' in WebAssembly;\n      mod = await WebAssembly[!streaming ? 'compile' : 'compileStreaming'](await fetch(`https://unpkg.com/imagescript@${version}/wasm/any/font.wasm`).then(x => streaming ? x : x.arrayBuffer()));\n    }\n\n    return this.new();\n  },\n\n  new() {\n    let registry = null;\n    const wasm = new WebAssembly.Instance(mod).exports;\n\n    class mem {\n      static length() { return wasm.wlen(); }\n      static alloc(size) { return wasm.walloc(size); }\n      static free(ptr, size) { return wasm.wfree(ptr, size); }\n      static u8(ptr, size) { return new Uint8Array(wasm.memory.buffer, ptr, size); }\n      static u32(ptr, size) { return new Uint32Array(wasm.memory.buffer, ptr, size); }\n\n      static copy_and_free(ptr, size) {\n        let slice = mem.u8(ptr, size).slice();\n        return (wasm.wfree(ptr, size), slice);\n      }\n    }\n    const encode_utf8 = 'Deno' in globalThis ? Deno.core.encode : (() => {\n      const encoder = new TextEncoder();\n      return string => encoder.encode(string);\n    })();\n\n    const decode_utf8 = 'Deno' in globalThis ? Deno.core.decode : (() => {\n      const decoder = new TextDecoder();\n      return buffer => decoder.decode(buffer);\n    })();\n\n    if ('FinalizationRegistry' in globalThis) {\n      registry = new FinalizationRegistry(([t, ptr]) => {\n        if (t === 0) wasm.font_free(ptr);\n        if (t === 1) wasm.layout_free(ptr);\n      });\n    }\n\n    class Font {\n      constructor(scale, buffer) {\n        this.scale = scale;\n        const ptr = mem.alloc(buffer.length);\n        mem.u8(ptr, buffer.length).set(buffer);\n        this.ptr = wasm.font_new(ptr, buffer.length, scale);\n\n        if (!this.ptr) throw new Error('invalid font');\n        if (registry) registry.register(this, [0, this.ptr], this);\n      }\n\n      free() {\n        this.ptr = wasm.font_free(this.ptr);\n        if (registry) registry.unregister(this);\n      }\n\n      has(char) {\n        return wasm.font_has(this.ptr, String.prototype.charCodeAt.call(char, 0));\n      }\n\n      metrics(char, scale = this.scale) {\n        const ptr = wasm.font_metrics(this.ptr, String.prototype.charCodeAt.call(char, 0), scale);\n        const metrics = JSON.parse(decode_utf8(mem.u8(wasm.font_metrics_buffer(ptr), mem.length())));\n\n        return (wasm.font_metrics_free(ptr), metrics);\n      }\n\n      rasterize(char, scale = this.scale) {\n        const ptr = wasm.font_rasterize(this.ptr, String.prototype.charCodeAt.call(char, 0), scale);\n\n        const glyph = {\n          buffer: mem.u8(wasm.font_rasterize_buffer(ptr), mem.length()).slice(),\n          metrics: JSON.parse(decode_utf8(mem.u8(wasm.font_rasterize_metrics(ptr), mem.length()))),\n        }\n\n        return (wasm.font_rasterize_free(ptr), glyph);\n      }\n    }\n\n    class Layout {\n      constructor() {\n        this.ptr = wasm.layout_new();\n        if (registry) this.refs = [];\n        if (registry) registry.register(this, [1, this.ptr], this);\n      }\n\n      clear() {\n        wasm.layout_clear(this.ptr);\n        if (registry) this.refs.length = 0;\n      }\n\n      lines() {\n        return wasm.layout_lines(this.ptr);\n      }\n\n      free() {\n        if (registry) this.refs.length = 0;\n        this.ptr = wasm.layout_free(this.ptr);\n        if (registry) registry.unregister(this);\n      }\n\n      reset(options = {}) {\n        options = encode_utf8(JSON.stringify(options));\n\n        if (registry) this.refs.length = 0;\n        const ptr = mem.alloc(options.length);\n        mem.u8(ptr, options.length).set(options);\n        wasm.layout_reset(this.ptr, ptr, options.length);\n      }\n\n      append(font, text, init) {\n        text = encode_utf8(text);\n        const options = init || {};\n        if (registry) this.refs.push(font);\n        const ptr = mem.alloc(text.length);\n        mem.u8(ptr, text.length).set(text);\n        const has_color = ('r' in options) || ('g' in options) || ('b' in options);\n        wasm.layout_append(this.ptr, font.ptr, ptr, text.length, options.scale == null ? font.scale : options.scale, has_color, options.r, options.g, options.b);\n      }\n\n      rasterize(r, g, b) {\n        const ptr = wasm.layout_rasterize(this.ptr, r, g, b);\n\n        const framebuffer = {\n          width: wasm.layout_rasterize_width(ptr),\n          height: wasm.layout_rasterize_height(ptr),\n          buffer: mem.u8(wasm.layout_rasterize_buffer(ptr), mem.length()).slice(),\n        }\n\n        return (wasm.layout_rasterize_free(ptr), framebuffer);\n      }\n    }\n\n    return { Font, Layout };\n  },\n}","const { version } = require('../../package.json');\n\nlet mod = null;\nmodule.exports = {\n  async init() {\n    if (!mod) {\n      const streaming = 'compileStreaming' in WebAssembly;\n      mod = await WebAssembly[!streaming ? 'compile' : 'compileStreaming'](await fetch(`https://unpkg.com/imagescript@${version}/wasm/any/gif.wasm`).then(x => streaming ? x : x.arrayBuffer()));\n    };\n\n    return this.new();\n  },\n\n  new() {\n    const streams = new Map;\n    const utf8encoder = new TextEncoder;\n\n    const wasm = new WebAssembly.Instance(mod, {\n      env: {\n        push_to_stream(id, ptr) {\n          streams.get(id).cb(mem.u8(ptr, mem.length()).slice());\n        },\n      },\n    }).exports;\n\n    class mem {\n      static length() { return wasm.wlen(); }\n      static alloc(size) { return wasm.walloc(size); }\n      static free(ptr, size) { return wasm.wfree(ptr, size); }\n      static u8(ptr, size) { return new Uint8Array(wasm.memory.buffer, ptr, size); }\n      static u32(ptr, size) { return new Uint32Array(wasm.memory.buffer, ptr, size); }\n\n      static copy_and_free(ptr, size) {\n        let slice = mem.u8(ptr, size).slice();\n        return (wasm.wfree(ptr, size), slice);\n      }\n    }\n\n    class Encoder {\n      constructor(width, height, loops = -1) {\n        this.slices = [];\n        streams.set(0, this);\n        this.ptr = wasm.encoder_new(0, width, height, loops);\n      }\n\n      cb(buffer) {\n        this.slices.push(buffer);\n      }\n\n      free() {\n        this.ptr = wasm.encoder_free(this.ptr);\n        streams.delete(0);\n      }\n\n      u8() {\n        this.free();\n        let offset = 0;\n        const u8 = new Uint8Array(this.slices.reduce((sum, array) => sum + array.length, 0));\n\n        for (const x of this.slices) {\n          u8.set(x, offset);\n          offset += x.length;\n        }\n\n        return u8;\n      }\n\n      add(x, y, delay, width, height, buffer, dispose, quality) {\n        const ptr = mem.alloc(buffer.length);\n        mem.u8(ptr, buffer.length).set(buffer);\n        wasm.encoder_add(this.ptr, ptr, buffer.length, x, y, width, height, delay, dispose, quality);\n      }\n\n      set comment(comment) {\n        const buffer = utf8encoder.encode(comment);\n\n        const ptr = mem.alloc(buffer.length);\n        mem.u8(ptr, buffer.length).set(buffer);\n        wasm.encoder_add_comment(this.ptr, ptr, buffer.length);\n      }\n\n      set application(application) {\n        const buffer = utf8encoder.encode(application);\n\n        const ptr = mem.alloc(buffer.length);\n        mem.u8(ptr, buffer.length).set(buffer);\n        wasm.encoder_add_application(this.ptr, ptr, buffer.length);\n      }\n    }\n\n    class Decoder {\n      constructor(buffer, limit = 0) {\n        const bptr = mem.alloc(buffer.length);\n        mem.u8(bptr, buffer.length).set(buffer);\n        this.ptr = wasm.decoder_new(bptr, buffer.length, limit);\n        if (0 === this.ptr) throw new Error('gif: failed to parse gif header');\n\n        this.width = wasm.decoder_width(this.ptr);\n        this.height = wasm.decoder_height(this.ptr);\n      }\n\n      free() {\n        this.ptr = wasm.decoder_free(this.ptr);\n      }\n\n      *frames() {\n        let frame;\n        while (frame = this.frame()) yield frame;\n      }\n\n      frame() {\n        const ptr = wasm.decoder_frame(this.ptr);\n\n        if (1 === ptr) return null;\n        if (0 === ptr) throw (this.free(), new Error('gif: failed to decode frame'));\n\n        const framebuffer = {\n          x: wasm.decoder_frame_x(ptr),\n          y: wasm.decoder_frame_y(ptr),\n          delay: wasm.decoder_frame_delay(ptr),\n          width: wasm.decoder_frame_width(ptr),\n          height: wasm.decoder_frame_height(ptr),\n          dispose: wasm.decoder_frame_dispose(ptr),\n          buffer: mem.u8(wasm.decoder_frame_buffer(ptr), mem.length()).slice(),\n        };\n\n        return (wasm.decoder_frame_free(ptr), framebuffer);\n      }\n    }\n\n    return { Encoder, Decoder };\n  },\n}\n","const { version } = require('../../package.json');\n\nlet mod = null;\nmodule.exports = {\n  async init() {\n    if (!mod) {\n      const streaming = 'compileStreaming' in WebAssembly;\n      mod = await WebAssembly[!streaming ? 'compile' : 'compileStreaming'](await fetch(`https://unpkg.com/imagescript@${version}/wasm/any/jpeg.wasm`).then(x => streaming ? x : x.arrayBuffer()));\n    };\n\n    return this.new();\n  },\n\n  new() {\n    const wasm = new WebAssembly.Instance(mod).exports;\n\n    class mem {\n      static length() { return wasm.wlen(); }\n      static alloc(size) { return wasm.walloc(size); }\n      static free(ptr, size) { return wasm.wfree(ptr, size); }\n      static u8(ptr, size) { return new Uint8Array(wasm.memory.buffer, ptr, size); }\n      static u32(ptr, size) { return new Uint32Array(wasm.memory.buffer, ptr, size); }\n\n      static copy_and_free(ptr, size) {\n        let slice = mem.u8(ptr, size).slice();\n        return (wasm.wfree(ptr, size), slice);\n      }\n    }\n\n    function encode(buffer, width, height, quality) {\n      const ptr = mem.alloc(buffer.length);\n      mem.u8(ptr, buffer.length).set(buffer);\n      return mem.copy_and_free(wasm.encode(ptr, width, height, quality), mem.length());\n    }\n\n    function decode(buffer, width, height) {\n      const bptr = mem.alloc(buffer.length);\n      mem.u8(bptr, buffer.length).set(buffer);\n      const ptr = wasm.decode(bptr, buffer.length, width, height);\n\n      if (0 === ptr) throw new Error('jpg: failed to decode');\n      if (1 === ptr) throw new Error('jpg: failed to scale decoder');\n\n      const framebuffer = {\n        width: wasm.decode_width(ptr),\n        height: wasm.decode_height(ptr),\n        format: wasm.decode_format(ptr),\n        buffer: mem.u8(wasm.decode_buffer(ptr), mem.length()).slice(),\n      }\n\n      return (wasm.decode_free(ptr), framebuffer);\n    }\n\n    return { encode, decode };\n  },\n}","const { version } = require('../../package.json');\n\nlet mod = null;\nmodule.exports = {\n  async init() {\n    if (!mod) {\n      const streaming = 'compileStreaming' in WebAssembly;\n      mod = await WebAssembly[!streaming ? 'compile' : 'compileStreaming'](await fetch(`https://unpkg.com/imagescript@${version}/wasm/any/svg.wasm`).then(x => streaming ? x : x.arrayBuffer()));\n    };\n\n    return this.new();\n  },\n\n  new() {\n    const wasm = new WebAssembly.Instance(mod).exports;\n\n    class mem {\n      static length() { return wasm.wlen(); }\n      static alloc(size) { return wasm.walloc(size); }\n      static free(ptr, size) { return wasm.wfree(ptr, size); }\n      static u8(ptr, size) { return new Uint8Array(wasm.memory.buffer, ptr, size); }\n      static u32(ptr, size) { return new Uint32Array(wasm.memory.buffer, ptr, size); }\n\n      static copy_and_free(ptr, size) {\n        let slice = mem.u8(ptr, size).slice();\n        return (wasm.wfree(ptr, size), slice);\n      }\n    }\n\n    function rasterize(buffer, fit, scale) {\n      const bptr = mem.alloc(buffer.length);\n      mem.u8(bptr, buffer.length).set(buffer);\n      const ptr = wasm.rasterize(bptr, buffer.length, fit, scale);\n\n      if (0 === ptr) throw new Error('svg: failed to parse');\n      if (1 === ptr) throw new Error('svg: failed to rasterize');\n\n      const framebuffer = {\n        width: wasm.rasterize_width(ptr),\n        height: wasm.rasterize_height(ptr),\n        buffer: mem.u8(wasm.rasterize_buffer(ptr), mem.length()).slice(),\n      }\n\n      return (wasm.rasterize_free(ptr), framebuffer);\n    }\n\n    return { rasterize };\n  },\n}\n","const { version } = require('../../package.json');\n\nlet mod = null;\nmodule.exports = {\n\tasync init() {\n\t\tif (!mod) {\n\t\t\tconst streaming = 'compileStreaming' in WebAssembly;\n\t\t\tmod = await WebAssembly[!streaming ? 'compile' : 'compileStreaming'](await fetch(`https://unpkg.com/imagescript@${version}/wasm/any/tiff.wasm`).then(x => streaming ? x : x.arrayBuffer()));\n\t\t};\n\n\t\treturn this.new();\n\t},\n\n\tnew() {\n\t\tconst wasm = new WebAssembly.Instance(mod).exports;\n\n\t\tclass mem {\n\t\t\tstatic length() { return wasm.wlen(); }\n\t\t\tstatic alloc(size) { return wasm.walloc(size); }\n\t\t\tstatic free(ptr, size) { return wasm.wfree(ptr, size); }\n\t\t\tstatic u8(ptr, size) { return new Uint8Array(wasm.memory.buffer, ptr, size); }\n\t\t\tstatic u32(ptr, size) { return new Uint32Array(wasm.memory.buffer, ptr, size); }\n\n\t\t\tstatic copy_and_free(ptr, size) {\n\t\t\t\tlet slice = mem.u8(ptr, size).slice();\n\t\t\t\treturn (wasm.wfree(ptr, size), slice);\n\t\t\t}\n\t\t}\n\n\t\tfunction decode(buffer) {\n\t\t\tconst bptr = mem.alloc(buffer.length);\n\t\t\tmem.u8(bptr, buffer.length).set(buffer);\n\t\t\tconst ptr = wasm.decode(bptr, buffer.length);\n\t\t\tif (0 === ptr) throw new Error('tiff: failed to decode');\n\n\t\t\tconst framebuffer = {\n\t\t\t\twidth: wasm.decode_width(ptr),\n\t\t\t\theight: wasm.decode_height(ptr),\n\t\t\t\tbuffer: mem.u8(wasm.decode_buffer(ptr), mem.length()).slice(),\n\t\t\t}\n\n\t\t\treturn (wasm.decode_free(ptr), framebuffer);\n\t\t}\n\n\t\treturn { decode };\n\t},\n}\n","// node_modules/fflate/esm/browser.js\n// https://github.com/101arrowz/fflate\n\n// MIT License\n\n// Copyright (c) 2020 Arjun Barrett\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n\nvar u8 = Uint8Array;\nvar u16 = Uint16Array;\nvar u32 = Uint32Array;\nvar fleb = new u8([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 0, 0, 0, 0]);\nvar fdeb = new u8([0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11, 12, 12, 13, 13, 0, 0]);\nvar clim = new u8([16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15]);\nvar freb = function (eb, start) {\n  var b = new u16(31);\n  for (var i = 0; i < 31; ++i) {\n    b[i] = start += 1 << eb[i - 1];\n  }\n  var r = new u32(b[30]);\n  for (var i = 1; i < 30; ++i) {\n    for (var j = b[i]; j < b[i + 1]; ++j) {\n      r[j] = j - b[i] << 5 | i;\n    }\n  }\n  return [b, r];\n};\nvar _a = freb(fleb, 2);\nvar fl = _a[0];\nvar revfl = _a[1];\nfl[28] = 258, revfl[258] = 28;\nvar _b = freb(fdeb, 0);\nvar fd = _b[0];\nvar revfd = _b[1];\nvar rev = new u16(32768);\nfor (var i = 0; i < 32768; ++i) {\n  x = (i & 43690) >>> 1 | (i & 21845) << 1;\n  x = (x & 52428) >>> 2 | (x & 13107) << 2;\n  x = (x & 61680) >>> 4 | (x & 3855) << 4;\n  rev[i] = ((x & 65280) >>> 8 | (x & 255) << 8) >>> 1;\n}\nvar x;\nvar hMap = function (cd, mb, r) {\n  var s = cd.length;\n  var i = 0;\n  var l = new u16(mb);\n  for (; i < s; ++i)\n    ++l[cd[i] - 1];\n  var le = new u16(mb);\n  for (i = 0; i < mb; ++i) {\n    le[i] = le[i - 1] + l[i - 1] << 1;\n  }\n  var co;\n  if (r) {\n    co = new u16(1 << mb);\n    var rvb = 15 - mb;\n    for (i = 0; i < s; ++i) {\n      if (cd[i]) {\n        var sv = i << 4 | cd[i];\n        var r_1 = mb - cd[i];\n        var v = le[cd[i] - 1]++ << r_1;\n        for (var m = v | (1 << r_1) - 1; v <= m; ++v) {\n          co[rev[v] >>> rvb] = sv;\n        }\n      }\n    }\n  } else {\n    co = new u16(s);\n    for (i = 0; i < s; ++i) {\n      if (cd[i]) {\n        co[i] = rev[le[cd[i] - 1]++] >>> 15 - cd[i];\n      }\n    }\n  }\n  return co;\n};\nvar flt = new u8(288);\nfor (var i = 0; i < 144; ++i)\n  flt[i] = 8;\nfor (var i = 144; i < 256; ++i)\n  flt[i] = 9;\nfor (var i = 256; i < 280; ++i)\n  flt[i] = 7;\nfor (var i = 280; i < 288; ++i)\n  flt[i] = 8;\nvar fdt = new u8(32);\nfor (var i = 0; i < 32; ++i)\n  fdt[i] = 5;\nvar flm = hMap(flt, 9, 0);\nvar flrm = hMap(flt, 9, 1);\nvar fdm = hMap(fdt, 5, 0);\nvar fdrm = hMap(fdt, 5, 1);\nvar max = function (a) {\n  var m = a[0];\n  for (var i = 1; i < a.length; ++i) {\n    if (a[i] > m)\n      m = a[i];\n  }\n  return m;\n};\nvar bits = function (d, p, m) {\n  var o = p >> 3 | 0;\n  return (d[o] | d[o + 1] << 8) >> (p & 7) & m;\n};\nvar bits16 = function (d, p) {\n  var o = p >> 3 | 0;\n  return (d[o] | d[o + 1] << 8 | d[o + 2] << 16) >> (p & 7);\n};\nvar shft = function (p) {\n  return (p >> 3 | 0) + (p & 7 && 1);\n};\nvar slc = function (v, s, e) {\n  if (s == null || s < 0)\n    s = 0;\n  if (e == null || e > v.length)\n    e = v.length;\n  var n = new (v instanceof u16 ? u16 : v instanceof u32 ? u32 : u8)(e - s);\n  n.set(v.subarray(s, e));\n  return n;\n};\nvar inflt = function (dat, buf, st) {\n  var sl = dat.length;\n  if (!sl || st && !st.l && sl < 5)\n    return buf || new u8(0);\n  var noBuf = !buf || st;\n  var noSt = !st || st.i;\n  if (!st)\n    st = {};\n  if (!buf)\n    buf = new u8(sl * 3);\n  var cbuf = function (l2) {\n    var bl = buf.length;\n    if (l2 > bl) {\n      var nbuf = new u8(Math.max(bl * 2, l2));\n      nbuf.set(buf);\n      buf = nbuf;\n    }\n  };\n  var final = st.f || 0, pos = st.p || 0, bt = st.b || 0, lm = st.l, dm = st.d, lbt = st.m, dbt = st.n;\n  var tbts = sl * 8;\n  do {\n    if (!lm) {\n      st.f = final = bits(dat, pos, 1);\n      var type = bits(dat, pos + 1, 3);\n      pos += 3;\n      if (!type) {\n        var s = shft(pos) + 4, l = dat[s - 4] | dat[s - 3] << 8, t = s + l;\n        if (t > sl) {\n          if (noSt)\n            throw \"unexpected EOF\";\n          break;\n        }\n        if (noBuf)\n          cbuf(bt + l);\n        buf.set(dat.subarray(s, t), bt);\n        st.b = bt += l, st.p = pos = t * 8;\n        continue;\n      } else if (type === 1)\n        lm = flrm, dm = fdrm, lbt = 9, dbt = 5;\n      else if (type === 2) {\n        var hLit = bits(dat, pos, 31) + 257, hcLen = bits(dat, pos + 10, 15) + 4;\n        var tl = hLit + bits(dat, pos + 5, 31) + 1;\n        pos += 14;\n        var ldt = new u8(tl);\n        var clt = new u8(19);\n        for (var i = 0; i < hcLen; ++i) {\n          clt[clim[i]] = bits(dat, pos + i * 3, 7);\n        }\n        pos += hcLen * 3;\n        var clb = max(clt), clbmsk = (1 << clb) - 1;\n        var clm = hMap(clt, clb, 1);\n        for (var i = 0; i < tl;) {\n          var r = clm[bits(dat, pos, clbmsk)];\n          pos += r & 15;\n          var s = r >>> 4;\n          if (s < 16) {\n            ldt[i++] = s;\n          } else {\n            var c = 0, n = 0;\n            if (s === 16)\n              n = 3 + bits(dat, pos, 3), pos += 2, c = ldt[i - 1];\n            else if (s === 17)\n              n = 3 + bits(dat, pos, 7), pos += 3;\n            else if (s === 18)\n              n = 11 + bits(dat, pos, 127), pos += 7;\n            while (n--)\n              ldt[i++] = c;\n          }\n        }\n        var lt = ldt.subarray(0, hLit), dt = ldt.subarray(hLit);\n        lbt = max(lt);\n        dbt = max(dt);\n        lm = hMap(lt, lbt, 1);\n        dm = hMap(dt, dbt, 1);\n      } else\n        throw \"invalid block type\";\n      if (pos > tbts) {\n        if (noSt)\n          throw \"unexpected EOF\";\n        break;\n      }\n    }\n    if (noBuf)\n      cbuf(bt + 131072);\n    var lms = (1 << lbt) - 1, dms = (1 << dbt) - 1;\n    var lpos = pos;\n    for (; ; lpos = pos) {\n      var c = lm[bits16(dat, pos) & lms], sym = c >>> 4;\n      pos += c & 15;\n      if (pos > tbts) {\n        if (noSt)\n          throw \"unexpected EOF\";\n        break;\n      }\n      if (!c)\n        throw \"invalid length/literal\";\n      if (sym < 256)\n        buf[bt++] = sym;\n      else if (sym === 256) {\n        lpos = pos, lm = null;\n        break;\n      } else {\n        var add = sym - 254;\n        if (sym > 264) {\n          var i = sym - 257, b = fleb[i];\n          add = bits(dat, pos, (1 << b) - 1) + fl[i];\n          pos += b;\n        }\n        var d = dm[bits16(dat, pos) & dms], dsym = d >>> 4;\n        if (!d)\n          throw \"invalid distance\";\n        pos += d & 15;\n        var dt = fd[dsym];\n        if (dsym > 3) {\n          var b = fdeb[dsym];\n          dt += bits16(dat, pos) & (1 << b) - 1, pos += b;\n        }\n        if (pos > tbts) {\n          if (noSt)\n            throw \"unexpected EOF\";\n          break;\n        }\n        if (noBuf)\n          cbuf(bt + 131072);\n        var end = bt + add;\n        for (; bt < end; bt += 4) {\n          buf[bt] = buf[bt - dt];\n          buf[bt + 1] = buf[bt + 1 - dt];\n          buf[bt + 2] = buf[bt + 2 - dt];\n          buf[bt + 3] = buf[bt + 3 - dt];\n        }\n        bt = end;\n      }\n    }\n    st.l = lm, st.p = lpos, st.b = bt;\n    if (lm)\n      final = 1, st.m = lbt, st.d = dm, st.n = dbt;\n  } while (!final);\n  return bt === buf.length ? buf : slc(buf, 0, bt);\n};\nvar wbits = function (d, p, v) {\n  v <<= p & 7;\n  var o = p >> 3 | 0;\n  d[o] |= v;\n  d[o + 1] |= v >>> 8;\n};\nvar wbits16 = function (d, p, v) {\n  v <<= p & 7;\n  var o = p >> 3 | 0;\n  d[o] |= v;\n  d[o + 1] |= v >>> 8;\n  d[o + 2] |= v >>> 16;\n};\nvar hTree = function (d, mb) {\n  var t = [];\n  for (var i = 0; i < d.length; ++i) {\n    if (d[i])\n      t.push({ s: i, f: d[i] });\n  }\n  var s = t.length;\n  var t2 = t.slice();\n  if (!s)\n    return [et, 0];\n  if (s === 1) {\n    var v = new u8(t[0].s + 1);\n    v[t[0].s] = 1;\n    return [v, 1];\n  }\n  t.sort(function (a, b) {\n    return a.f - b.f;\n  });\n  t.push({ s: -1, f: 25001 });\n  var l = t[0], r = t[1], i0 = 0, i1 = 1, i2 = 2;\n  t[0] = { s: -1, f: l.f + r.f, l, r };\n  while (i1 !== s - 1) {\n    l = t[t[i0].f < t[i2].f ? i0++ : i2++];\n    r = t[i0 !== i1 && t[i0].f < t[i2].f ? i0++ : i2++];\n    t[i1++] = { s: -1, f: l.f + r.f, l, r };\n  }\n  var maxSym = t2[0].s;\n  for (var i = 1; i < s; ++i) {\n    if (t2[i].s > maxSym)\n      maxSym = t2[i].s;\n  }\n  var tr = new u16(maxSym + 1);\n  var mbt = ln(t[i1 - 1], tr, 0);\n  if (mbt > mb) {\n    var i = 0, dt = 0;\n    var lft = mbt - mb, cst = 1 << lft;\n    t2.sort(function (a, b) {\n      return tr[b.s] - tr[a.s] || a.f - b.f;\n    });\n    for (; i < s; ++i) {\n      var i2_1 = t2[i].s;\n      if (tr[i2_1] > mb) {\n        dt += cst - (1 << mbt - tr[i2_1]);\n        tr[i2_1] = mb;\n      } else\n        break;\n    }\n    dt >>>= lft;\n    while (dt > 0) {\n      var i2_2 = t2[i].s;\n      if (tr[i2_2] < mb)\n        dt -= 1 << mb - tr[i2_2]++ - 1;\n      else\n        ++i;\n    }\n    for (; i >= 0 && dt; --i) {\n      var i2_3 = t2[i].s;\n      if (tr[i2_3] === mb) {\n        --tr[i2_3];\n        ++dt;\n      }\n    }\n    mbt = mb;\n  }\n  return [new u8(tr), mbt];\n};\nvar ln = function (n, l, d) {\n  return n.s === -1 ? Math.max(ln(n.l, l, d + 1), ln(n.r, l, d + 1)) : l[n.s] = d;\n};\nvar lc = function (c) {\n  var s = c.length;\n  while (s && !c[--s])\n    ;\n  var cl = new u16(++s);\n  var cli = 0, cln = c[0], cls = 1;\n  var w = function (v) {\n    cl[cli++] = v;\n  };\n  for (var i = 1; i <= s; ++i) {\n    if (c[i] === cln && i !== s)\n      ++cls;\n    else {\n      if (!cln && cls > 2) {\n        for (; cls > 138; cls -= 138)\n          w(32754);\n        if (cls > 2) {\n          w(cls > 10 ? cls - 11 << 5 | 28690 : cls - 3 << 5 | 12305);\n          cls = 0;\n        }\n      } else if (cls > 3) {\n        w(cln), --cls;\n        for (; cls > 6; cls -= 6)\n          w(8304);\n        if (cls > 2)\n          w(cls - 3 << 5 | 8208), cls = 0;\n      }\n      while (cls--)\n        w(cln);\n      cls = 1;\n      cln = c[i];\n    }\n  }\n  return [cl.subarray(0, cli), s];\n};\nvar clen = function (cf, cl) {\n  var l = 0;\n  for (var i = 0; i < cl.length; ++i)\n    l += cf[i] * cl[i];\n  return l;\n};\nvar wfblk = function (out, pos, dat) {\n  var s = dat.length;\n  var o = shft(pos + 2);\n  out[o] = s & 255;\n  out[o + 1] = s >>> 8;\n  out[o + 2] = out[o] ^ 255;\n  out[o + 3] = out[o + 1] ^ 255;\n  for (var i = 0; i < s; ++i)\n    out[o + i + 4] = dat[i];\n  return (o + 4 + s) * 8;\n};\nvar wblk = function (dat, out, final, syms, lf, df, eb, li, bs, bl, p) {\n  wbits(out, p++, final);\n  ++lf[256];\n  var _a2 = hTree(lf, 15), dlt = _a2[0], mlb = _a2[1];\n  var _b2 = hTree(df, 15), ddt = _b2[0], mdb = _b2[1];\n  var _c = lc(dlt), lclt = _c[0], nlc = _c[1];\n  var _d = lc(ddt), lcdt = _d[0], ndc = _d[1];\n  var lcfreq = new u16(19);\n  for (var i = 0; i < lclt.length; ++i)\n    lcfreq[lclt[i] & 31]++;\n  for (var i = 0; i < lcdt.length; ++i)\n    lcfreq[lcdt[i] & 31]++;\n  var _e = hTree(lcfreq, 7), lct = _e[0], mlcb = _e[1];\n  var nlcc = 19;\n  for (; nlcc > 4 && !lct[clim[nlcc - 1]]; --nlcc)\n    ;\n  var flen = bl + 5 << 3;\n  var ftlen = clen(lf, flt) + clen(df, fdt) + eb;\n  var dtlen = clen(lf, dlt) + clen(df, ddt) + eb + 14 + 3 * nlcc + clen(lcfreq, lct) + (2 * lcfreq[16] + 3 * lcfreq[17] + 7 * lcfreq[18]);\n  if (flen <= ftlen && flen <= dtlen)\n    return wfblk(out, p, dat.subarray(bs, bs + bl));\n  var lm, ll, dm, dl;\n  wbits(out, p, 1 + (dtlen < ftlen)), p += 2;\n  if (dtlen < ftlen) {\n    lm = hMap(dlt, mlb, 0), ll = dlt, dm = hMap(ddt, mdb, 0), dl = ddt;\n    var llm = hMap(lct, mlcb, 0);\n    wbits(out, p, nlc - 257);\n    wbits(out, p + 5, ndc - 1);\n    wbits(out, p + 10, nlcc - 4);\n    p += 14;\n    for (var i = 0; i < nlcc; ++i)\n      wbits(out, p + 3 * i, lct[clim[i]]);\n    p += 3 * nlcc;\n    var lcts = [lclt, lcdt];\n    for (var it = 0; it < 2; ++it) {\n      var clct = lcts[it];\n      for (var i = 0; i < clct.length; ++i) {\n        var len = clct[i] & 31;\n        wbits(out, p, llm[len]), p += lct[len];\n        if (len > 15)\n          wbits(out, p, clct[i] >>> 5 & 127), p += clct[i] >>> 12;\n      }\n    }\n  } else {\n    lm = flm, ll = flt, dm = fdm, dl = fdt;\n  }\n  for (var i = 0; i < li; ++i) {\n    if (syms[i] > 255) {\n      var len = syms[i] >>> 18 & 31;\n      wbits16(out, p, lm[len + 257]), p += ll[len + 257];\n      if (len > 7)\n        wbits(out, p, syms[i] >>> 23 & 31), p += fleb[len];\n      var dst = syms[i] & 31;\n      wbits16(out, p, dm[dst]), p += dl[dst];\n      if (dst > 3)\n        wbits16(out, p, syms[i] >>> 5 & 8191), p += fdeb[dst];\n    } else {\n      wbits16(out, p, lm[syms[i]]), p += ll[syms[i]];\n    }\n  }\n  wbits16(out, p, lm[256]);\n  return p + ll[256];\n};\nvar deo = new u32([65540, 131080, 131088, 131104, 262176, 1048704, 1048832, 2114560, 2117632]);\nvar et = new u8(0);\nvar dflt = function (dat, lvl, plvl, pre, post, lst) {\n  var s = dat.length;\n  var o = new u8(pre + s + 5 * (1 + Math.ceil(s / 7e3)) + post);\n  var w = o.subarray(pre, o.length - post);\n  var pos = 0;\n  if (!lvl || s < 8) {\n    for (var i = 0; i <= s; i += 65535) {\n      var e = i + 65535;\n      if (e < s) {\n        pos = wfblk(w, pos, dat.subarray(i, e));\n      } else {\n        w[i] = lst;\n        pos = wfblk(w, pos, dat.subarray(i, s));\n      }\n    }\n  } else {\n    var opt = deo[lvl - 1];\n    var n = opt >>> 13, c = opt & 8191;\n    var msk_1 = (1 << plvl) - 1;\n    var prev = new u16(32768), head = new u16(msk_1 + 1);\n    var bs1_1 = Math.ceil(plvl / 3), bs2_1 = 2 * bs1_1;\n    var hsh = function (i2) {\n      return (dat[i2] ^ dat[i2 + 1] << bs1_1 ^ dat[i2 + 2] << bs2_1) & msk_1;\n    };\n    var syms = new u32(25e3);\n    var lf = new u16(288), df = new u16(32);\n    var lc_1 = 0, eb = 0, i = 0, li = 0, wi = 0, bs = 0;\n    for (; i < s; ++i) {\n      var hv = hsh(i);\n      var imod = i & 32767, pimod = head[hv];\n      prev[imod] = pimod;\n      head[hv] = imod;\n      if (wi <= i) {\n        var rem = s - i;\n        if ((lc_1 > 7e3 || li > 24576) && rem > 423) {\n          pos = wblk(dat, w, 0, syms, lf, df, eb, li, bs, i - bs, pos);\n          li = lc_1 = eb = 0, bs = i;\n          for (var j = 0; j < 286; ++j)\n            lf[j] = 0;\n          for (var j = 0; j < 30; ++j)\n            df[j] = 0;\n        }\n        var l = 2, d = 0, ch_1 = c, dif = imod - pimod & 32767;\n        if (rem > 2 && hv === hsh(i - dif)) {\n          var maxn = Math.min(n, rem) - 1;\n          var maxd = Math.min(32767, i);\n          var ml = Math.min(258, rem);\n          while (dif <= maxd && --ch_1 && imod !== pimod) {\n            if (dat[i + l] === dat[i + l - dif]) {\n              var nl = 0;\n              for (; nl < ml && dat[i + nl] === dat[i + nl - dif]; ++nl)\n                ;\n              if (nl > l) {\n                l = nl, d = dif;\n                if (nl > maxn)\n                  break;\n                var mmd = Math.min(dif, nl - 2);\n                var md = 0;\n                for (var j = 0; j < mmd; ++j) {\n                  var ti = i - dif + j + 32768 & 32767;\n                  var pti = prev[ti];\n                  var cd = ti - pti + 32768 & 32767;\n                  if (cd > md)\n                    md = cd, pimod = ti;\n                }\n              }\n            }\n            imod = pimod, pimod = prev[imod];\n            dif += imod - pimod + 32768 & 32767;\n          }\n        }\n        if (d) {\n          syms[li++] = 268435456 | revfl[l] << 18 | revfd[d];\n          var lin = revfl[l] & 31, din = revfd[d] & 31;\n          eb += fleb[lin] + fdeb[din];\n          ++lf[257 + lin];\n          ++df[din];\n          wi = i + l;\n          ++lc_1;\n        } else {\n          syms[li++] = dat[i];\n          ++lf[dat[i]];\n        }\n      }\n    }\n    pos = wblk(dat, w, lst, syms, lf, df, eb, li, bs, i - bs, pos);\n    if (!lst && pos & 7)\n      pos = wfblk(w, pos + 1, et);\n  }\n  return slc(o, 0, pre + shft(pos) + post);\n};\nvar adler = function () {\n  var a = 1, b = 0;\n  return {\n    p: function (d) {\n      var n = a, m = b;\n      var l = d.length | 0;\n      for (var i = 0; i !== l;) {\n        var e = Math.min(i + 2655, l);\n        for (; i < e; ++i)\n          m += n += d[i];\n        n = (n & 65535) + 15 * (n >> 16), m = (m & 65535) + 15 * (m >> 16);\n      }\n      a = n, b = m;\n    },\n    d: function () {\n      a %= 65521, b %= 65521;\n      return (a & 255) << 24 | a >>> 8 << 16 | (b & 255) << 8 | b >>> 8;\n    }\n  };\n};\nvar dopt = function (dat, opt, pre, post, st) {\n  return dflt(dat, opt.level == null ? 6 : opt.level, opt.mem == null ? Math.ceil(Math.max(8, Math.min(13, Math.log(dat.length))) * 1.5) : 12 + opt.mem, pre, post, !st);\n};\nvar wbytes = function (d, b, v) {\n  for (; v; ++b)\n    d[b] = v, v >>>= 8;\n};\nvar zlh = function (c, o) {\n  var lv = o.level, fl2 = lv === 0 ? 0 : lv < 6 ? 1 : lv === 9 ? 3 : 2;\n  c[0] = 120, c[1] = fl2 << 6 | (fl2 ? 32 - 2 * fl2 : 1);\n};\nvar zlv = function (d) {\n  if ((d[0] & 15) !== 8 || d[0] >>> 4 > 7 || (d[0] << 8 | d[1]) % 31)\n    throw \"invalid zlib data\";\n  if (d[1] & 32)\n    throw \"invalid zlib data: preset dictionaries not supported\";\n};\nfunction zlibSync(data, opts) {\n  if (!opts)\n    opts = {};\n  var a = adler();\n  a.p(data);\n  var d = dopt(data, opts, 2, 4);\n  return zlh(d, opts), wbytes(d, d.length - 4, a.d()), d;\n}\nfunction unzlibSync(data, out) {\n  return inflt((zlv(data), data.subarray(2, -4)), out);\n}\n\n// bundle.js\nfunction compress(buf, level) {\n  return zlibSync(buf, { level });\n}\n\nfunction decompress(buf, limit) {\n  return unzlibSync(buf, new Uint8Array(limit));\n}\n\nmodule.exports = {\n  compress,\n  decompress\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(248);\n"],"names":["root","factory","exports","module","define","amd","self","png","mem","giflib","svglib","version","fontlib","jpeglib","tifflib","Image","constructor","width","height","RangeError","this","__width__","__height__","__buffer__","ArrayBuffer","__view__","DataView","__u32__","Uint32Array","bitmap","Uint8ClampedArray","toString","Symbol","iterator","y","x","iterateWithColors","offset","getUint32","rgbaToColor","r","g","b","a","rgbToColor","hslaToColor","h","s","l","Math","min","max","hue2rgb","p","q","t","hslToColor","rgbaToHSLA","d","colorToRGBA","color","colorToRGB","slice","getPixelAt","__check_boundaries__","getRGBAAt","idx","subarray","setPixelAt","pixelColor","__set_pixel__","setUint32","isNaN","TypeError","__out_of_bounds__","fill","clone","image","set","RESIZE_NEAREST_NEIGHBOR","RESIZE_AUTO","scale","factor","mode","__scale__","__apply__","__resize__","resize","contain","scaleFactor","fit","result","composite","cover","crop","Error","floor","__resize_nearest_neighbor__","ySrc","xSrc","destPos","srcPos","__crop__","tY","drawBox","__fast_box__","tX","nX","nY","tC","right","xPos","end","start","bottom","copyWithin","drawCircle","radius","radSquared","currentY","currentX","cropCircle","feathering","centerX","centerY","distanceFromCenter","alphaIdx","opacity","absolute","__set_channel_value__","red","saturation","green","blue","value","i","length","lightness","source","yy","y_offset","xx","x_offset","fg","bg","__alpha_blend__","fa","alpha","inv_alpha","invert","invertValue","invertSaturation","invertHue","hueShift","degrees","averageColor","colorAvg","divisor","rgba","map","v","dominantColor","ignoreBlack","ignoreWhite","bwThreshold","colorCounts","Array","key","maxColorCount","mostProminentValue","forEach","el","rotate","angle","__rotate_180__","rad","PI","sin","cos","abs","out","out_cx","out_cy","src_cx","src_cy","w","ysin","ycos","xf","yf","__interpolate__","reverse","src","x0","y0","x1","y1","x2","y2","xq","yq","out_slice","ref","__pawn__","point0","point1","weight","src_slice","wa","Frame","from","duration","xOffset","yOffset","disposalMode","gradient","colors","entries","Object","sort","positions","e","parseFloat","values","__gradient__","position","minDef","maxDef","gradients","minPos","undefined","maxPos","minVal","maxVal","push","roundCorners","xRad","startColor","endColor","sr","sg","sb","sa","er","eg","eb","ea","fisheye","tu32","ru32","iw","ih","xco","yco","dfc","sqrt","dis","nx","ny","cO","encode","compression","title","author","description","copyright","creationTime","software","disclaimer","warning","comment","level","channels","text","Title","Author","Description","Copyright","Date","now","toUTCString","Software","Disclaimer","Warning","Source","Comment","encodeJPEG","quality","init","decode","data","view","buffer","byteOffset","byteLength","ImageType","isPNG","pixels","isJPEG","framebuffer","pixelType","format","pixel","isTIFF","SVG_MODE_SCALE","SVG_MODE_WIDTH","SVG_MODE_HEIGHT","renderSVG","svg","size","includes","TextEncoder","rasterize","renderText","font","layout","TextLayout","Font","Layout","layoutOptions","reset","max_width","maxWidth","max_height","maxHeight","wrap_style","wrapStyle","vertical_align","verticalAlign","horizontal_align","horizontalAlign","wrap_hard_breaks","wrapHardBreaks","append","lines","free","DISPOSAL_KEEP","DISPOSAL_PREVIOUS","DISPOSAL_BACKGROUND","__convert_disposal_mode__","indexOf","super","__disposalMode__","frame","originalWidth","originalHeight","GIF","frames","loopCount","Infinity","reduce","acc","encoder","Encoder","add","u8","onlyExtractFirstFrame","isGIF","decoder","Decoder","first","next","delay","dispose","gwidth","gheight","u32","Uint8Array","offset8","offset32","fx","fy","f8","f32","t8","t32","options","getType","isView","shared","SharedArrayBuffer","from_parts","buffers","isArray","table","crc","bl","crc32","compress","decompress","__IHDR__","__IDAT__","__IEND__","__IEND_CRC__","HEAD","channels_to_color_type","utf8encoder","depth","tmp_offset","row_length","tmp","chunks","kb","tb","chunk","compressed","array","bit_depth","color_type","bytespp","p_offset","c_offset","palette","alphaPalette","maxSearchOffset","type","pxlOffset","filter","filter_1","filter_2","filter_3","filter_4","newPixels","pixelView","c","pa","pb","pc","mod","streaming","WebAssembly","fetch","then","arrayBuffer","new","registry","wasm","Instance","wlen","alloc","walloc","ptr","wfree","memory","copy_and_free","encode_utf8","globalThis","Deno","core","string","decode_utf8","TextDecoder","FinalizationRegistry","font_free","layout_free","font_new","register","unregister","has","char","font_has","String","prototype","charCodeAt","call","metrics","font_metrics","JSON","parse","font_metrics_buffer","font_metrics_free","font_rasterize","glyph","font_rasterize_buffer","font_rasterize_metrics","font_rasterize_free","layout_new","refs","clear","layout_clear","layout_lines","stringify","layout_reset","has_color","layout_append","layout_rasterize","layout_rasterize_width","layout_rasterize_height","layout_rasterize_buffer","layout_rasterize_free","streams","Map","env","push_to_stream","id","get","cb","loops","slices","encoder_new","encoder_free","delete","sum","encoder_add","encoder_add_comment","application","encoder_add_application","limit","bptr","decoder_new","decoder_width","decoder_height","decoder_free","decoder_frame","decoder_frame_x","decoder_frame_y","decoder_frame_delay","decoder_frame_width","decoder_frame_height","decoder_frame_dispose","decoder_frame_buffer","decoder_frame_free","decode_width","decode_height","decode_format","decode_buffer","decode_free","rasterize_width","rasterize_height","rasterize_buffer","rasterize_free","u16","Uint16Array","fleb","fdeb","clim","freb","j","_a","fl","revfl","_b","fd","revfd","rev","hMap","cd","mb","co","le","rvb","sv","r_1","m","flt","fdt","flm","flrm","fdm","fdrm","bits","o","bits16","shft","slc","n","wbits","wbits16","hTree","f","t2","et","i0","i1","i2","maxSym","tr","mbt","ln","dt","lft","cst","i2_1","i2_2","i2_3","lc","cl","cli","cln","cls","clen","cf","wfblk","pos","dat","wblk","final","syms","lf","df","li","bs","_a2","dlt","mlb","_b2","ddt","mdb","_c","lclt","nlc","_d","lcdt","ndc","lcfreq","_e","lct","mlcb","nlcc","lm","ll","dm","dl","flen","ftlen","dtlen","llm","lcts","it","clct","len","dst","deo","buf","opts","adler","opt","pre","post","st","lv","fl2","lvl","plvl","lst","ceil","msk_1","prev","head","bs1_1","bs2_1","hsh","lc_1","wi","hv","imod","pimod","rem","ch_1","dif","maxn","maxd","ml","nl","mmd","md","ti","lin","din","dflt","log","wbytes","zlibSync","sl","noBuf","noSt","cbuf","l2","nbuf","bt","lbt","dbt","tbts","hLit","hcLen","tl","ldt","clt","clb","clbmsk","clm","lt","lms","dms","lpos","sym","dsym","inflt","zlv","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","__webpack_modules__"],"sourceRoot":""}