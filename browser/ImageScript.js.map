{"version":3,"sources":["webpack://ImageScript/webpack/universalModuleDefinition","webpack://ImageScript/./ImageScript.js","webpack://ImageScript/./utils/buffer.js","webpack://ImageScript/./utils/crc32.js","webpack://ImageScript/./utils/png.js","webpack://ImageScript/./utils/wasm/font.js","webpack://ImageScript/./utils/wasm/gif.js","webpack://ImageScript/./utils/wasm/jpeg.js","webpack://ImageScript/./utils/wasm/svg.js","webpack://ImageScript/./utils/wasm/tiff.js","webpack://ImageScript/./utils/wasm/zlib.js","webpack://ImageScript/webpack/bootstrap","webpack://ImageScript/webpack/startup"],"names":["root","factory","exports","module","define","amd","self","png","fontlib","svglib","jpeglib","tifflib","giflib","Image","width","height","RangeError","this","__width__","__height__","__buffer__","ArrayBuffer","__view__","DataView","__u32__","Uint32Array","bitmap","Uint8ClampedArray","Symbol","iterator","y","x","offset","getUint32","r","g","b","a","rgbaToColor","h","s","l","Math","min","max","hue2rgb","p","q","t","hslaToColor","d","color","colorToRGBA","slice","__check_boundaries__","idx","subarray","pixelColor","__set_pixel__","setUint32","isNaN","TypeError","__out_of_bounds__","fill","image","new","set","factor","mode","RESIZE_NEAREST_NEIGHBOR","__scale__","__apply__","__resize__","RESIZE_AUTO","Error","floor","__resize_nearest_neighbor__","constructor","ySrc","xSrc","destPos","srcPos","__crop__","tY","__fast_box__","tX","nX","nY","tC","right","xPos","end","start","bottom","copyWithin","radius","radSquared","currentY","currentX","feathering","centerX","centerY","distanceFromCenter","alphaIdx","opacity","absolute","__set_channel_value__","saturation","value","i","length","rgbaToHSLA","getRGBAAt","source","yy","y_offset","xx","x_offset","fg","bg","__alpha_blend__","fa","alpha","inv_alpha","iterateWithColors","degrees","colorAvg","divisor","rgba","map","v","ignoreBlack","ignoreWhite","bwThreshold","colorCounts","Array","key","maxColorCount","mostProminentValue","forEach","el","dominantColor","angle","resize","__rotate_180__","rad","PI","sin","cos","abs","out","out_cx","out_cy","src_cx","src_cy","w","ysin","ycos","xf","yf","__interpolate__","reverse","src","x0","y0","x1","y1","x2","y2","xq","yq","out_slice","ref","__pawn__","point0","point1","weight","src_slice","wa","colors","entries","Object","sort","positions","e","parseFloat","values","gradient","__gradient__","position","minDef","maxDef","gradients","minPos","undefined","maxPos","minVal","maxVal","push","xRad","startColor","endColor","sr","sg","sb","sa","er","eg","eb","ea","compression","encode","level","channels","quality","jpegCanvas","composite","data","view","isView","Uint8Array","buffer","byteOffset","byteLength","pixels","decode","pixelType","meta","free","pixel","svg","size","SVG_MODE_SCALE","SVG_MODE_WIDTH","SVG_MODE_HEIGHT","includes","toString","status","font","scale","text","wrapWidth","Infinity","wrapStyle","WRAP_STYLE_WORD","load","render","Frame","duration","super","frame","GIF","frames","loopCount","indexOf","reduce","acc","encoder","GIFEncoder","initialize","add","encoded","arrays","array","table","crc","crc32","Buffer","compress","decompress","__IHDR__","__IDAT__","__IEND__","__IEND_CRC__","HEAD","channels_to_color_type","1","2","3","4","depth","tmp_offset","row_length","tmp","compressed","bpc","pixel_type","0","6","bytespp","p_offset","c_offset","chunks","palette","alphaPalette","type","pxlOffset","concat","filter","filter_1","filter_2","filter_3","filter_4","newPixels","pixelView","c","pa","pb","pc","version","u8array_ref","i32array_ref","u32array_ref","wasm","utf8encoder","TextEncoder","u8array","memory","i32array","Int32Array","ptr","id","max_width","wrap_style","str","string","len","__wbindgen_malloc","u8","code","charCodeAt","substring","__wbindgen_realloc","encodeInto","written","string_to_ptr","i32","__wbindgen_free","instance","WebAssembly","instantiate","fetch","then","arrayBuffer","u8array_to_ptr","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","cachegetUint8Memory0","getUint8Memory0","cachegetInt32Memory0","getInt32Memory0","WASM_VECTOR_LEN","__wbg_gif_encoder_free","repeat","__wbindgen_placeholder__","__wbindgen_throw","arg0","arg1","ret","gif_encoder_new","retptr","__wbindgen_export_0","gif_encoder_buffer","r0","r1","v0","delay","ptr0","arg","malloc","passArray8ToWasm0","gif_encoder_add","getArrayU8FromWasm0","cachegetUint16Memory0","async","initWASM","v1","Uint16Array","cachedTextEncoder","encodeString","buf","read","cachegetUint32Memory0","fit_kind","zoom","realloc","mem","passStringToWasm0","__wbindgen_export_2","__wbindgen_export_1","ptr_to_u8array","limit","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"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","file":"ImageScript.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ImageScript\"] = factory();\n\telse\n\t\troot[\"ImageScript\"] = factory();\n})(self, function() {\nreturn ","const png = require('./utils/png');\nconst fontlib = require('./utils/wasm/font');\nconst svglib = require('./utils/wasm/svg');\nconst jpeglib = require('./utils/wasm/jpeg');\nconst tifflib = require('./utils/wasm/tiff');\nconst giflib = require('./utils/wasm/gif');\n\n/**\n * Represents an image; provides utility functions\n */\nclass Image {\n    /**\n     * Creates a new image with the given dimensions\n     * @param {number} width\n     * @param {number} height\n     * @returns {Image}\n     */\n    constructor(width, height) {\n        width = ~~width;\n        height = ~~height;\n\n        if (width < 1)\n            throw new RangeError('Image has to be at least 1 pixel wide');\n        if (height < 1)\n            throw new RangeError('Image has to be at least 1 pixel high');\n\n        /** @private */\n        this.__width__ = width;\n        /** @private */\n        this.__height__ = height;\n        /** @private */\n        this.__buffer__ = new ArrayBuffer(width * height * 4);\n        /** @private */\n        this.__view__ = new DataView(this.__buffer__);\n        /** @private */\n        this.__u32__ = new Uint32Array(this.__buffer__);\n        /**\n         * The images RGBA pixel data\n         * @type {Uint8ClampedArray}\n         */\n        this.bitmap = new Uint8ClampedArray(this.__buffer__);\n    }\n\n    /**\n     * @private\n     * @returns {string}\n     */\n    toString() {\n        return `Image<${this.width}x${this.height}>`;\n    }\n\n    /** @private */\n    static new(width, height) {\n        return new this(width, height);\n    }\n\n    /**\n     * The images width\n     * @returns {number}\n     */\n    get width() {\n        return this.__width__;\n    }\n\n    /**\n     * The images height\n     * @returns {number}\n     */\n    get height() {\n        return this.__height__;\n    }\n\n    /**\n     * Yields an [x,y] array for every pixel in the image\n     * @yields {[number, number]} The coordinates of the pixel\n     * @returns {void}\n     */\n    * [Symbol.iterator]() {\n        for (let y = 1; y <= this.height; y++) {\n            for (let x = 1; x <= this.width; x++) {\n                yield [x, y];\n            }\n        }\n    }\n\n    /**\n     * Yields an [x,y,color] array for every pixel in the image\n     * @yields {[number, number, number]} The coordinates and color of the pixel\n     * @returns {void}\n     */\n    * iterateWithColors() {\n        let offset = 0;\n        for (let y = 1; y <= this.height; y++) {\n            for (let x = 1; x <= this.width; x++) {\n                yield [x, y, this.__view__.getUint32(offset, false)];\n                offset += 4;\n            }\n        }\n    }\n\n    /**\n     * Converts RGBA components to an RGBA value\n     * @param {number} r red (0..255)\n     * @param {number} g green (0..255)\n     * @param {number} b blue (0..255)\n     * @param {number} a alpha (0..255)\n     * @returns {number} RGBA value\n     */\n    static rgbaToColor(r, g, b, a) {\n        return (((r & 0xff) << 24) | ((g & 0xff) << 16) | ((b & 0xff) << 8) | (a & 0xff)) >>> 0;\n    }\n\n    /**\n     * Converts RGB components to an RGBA value (assuming alpha = 255)\n     * @param {number} r red (0..255)\n     * @param {number} g green (0..255)\n     * @param {number} b blue (0..255)\n     * @returns {number} RGBA value\n     */\n    static rgbToColor(r, g, b) {\n        return Image.rgbaToColor(r, g, b, 0xff);\n    }\n\n    /**\n     * Converts HSLA colors to RGBA colors\n     * @param {number} h hue (0..1)\n     * @param {number} s saturation (0..1)\n     * @param {number} l lightness (0..1)\n     * @param {number} a opacity (0..1)\n     * @returns {number} color\n     */\n    static hslaToColor(h, s, l, a) {\n        h %= 1;\n        s = Math.min(1, Math.max(0, s));\n        l = Math.min(1, Math.max(0, l));\n        a = Math.min(1, Math.max(0, a));\n\n        let r, g, b;\n\n        if (s === 0) {\n            r = g = b = l;\n        } else {\n            const hue2rgb = (p, q, t) => {\n                if (t < 0) t += 1;\n                if (t > 1) t -= 1;\n                if (t < 1 / 6) return p + (q - p) * 6 * t;\n                if (t < 1 / 2) return q;\n                if (t < 2 / 3) return p + (q - p) * (2 / 3 - t) * 6;\n                return p;\n            };\n\n            const q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n            const p = 2 * l - q;\n\n            r = hue2rgb(p, q, h + 1 / 3);\n            g = hue2rgb(p, q, h);\n            b = hue2rgb(p, q, h - 1 / 3);\n        }\n\n        return Image.rgbaToColor(r * 255, g * 255, b * 255, a * 255);\n    }\n\n    /**\n     * Converts HSL colors to RGBA colors (assuming an opacity of 255)\n     * @param {number} h hue (0..1)\n     * @param {number} s saturation (0..1)\n     * @param {number} l lightness (0..1)\n     * @returns {number} color\n     */\n    static hslToColor(h, s, l) {\n        return Image.hslaToColor(h, s, l, 1);\n    }\n\n    /**\n     * Converts an RGBA value to an array of HSLA values\n     * @param r {number} (0..255)\n     * @param g {number} (0..255)\n     * @param b {number} (0..255)\n     * @param a {number} (0..255)\n     * @returns {(number)[]} The HSLA values ([H, S, L, A])\n     */\n    static rgbaToHSLA(r, g, b, a) {\n        r /= 255;\n        g /= 255;\n        b /= 255;\n\n        const max = Math.max(r, g, b), min = Math.min(r, g, b);\n        let h, s, l = (max + min) / 2;\n\n        if (max === min) {\n            h = s = 0;\n        } else {\n            const d = max - min;\n            s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n            switch (max) {\n                case r:\n                    h = (g - b) / d + (g < b ? 6 : 0);\n                    break;\n                case g:\n                    h = (b - r) / d + 2;\n                    break;\n                case b:\n                    h = (r - g) / d + 4;\n                    break;\n            }\n\n            h /= 6;\n        }\n\n        return [h, s, l, a / 255];\n    }\n\n    /**\n     * Converts a color value to an array of RGBA values\n     * @param {number} color The color value to convert\n     * @returns {number[]} The RGBA values ([R, G, B, A])\n     */\n    static colorToRGBA(color) {\n        return [(color >> 24) & 0xff, (color >> 16) & 0xff, (color >> 8) & 0xff, color & 0xff];\n    }\n\n    /**\n     * Converts a color value to an array of RGB values (ignoring the colors alpha)\n     * @param {number} color The color value to convert\n     * @returns {number[]} The RGB values ([R, G, B])\n     */\n    static colorToRGB(color) {\n        return Image.colorToRGBA(color).slice(0, 3);\n    }\n\n    /**\n     * Gets the pixel color at the specified position\n     * @param {number} x\n     * @param {number} y\n     * @returns {number} The color value\n     */\n    getPixelAt(x, y) {\n        this.__check_boundaries__(x, y);\n        return this.__view__.getUint32((~~y - 1) * this.width + (~~x - 1), false);\n    }\n\n    /**\n     * Gets the pixel color at the specified position\n     * @param {number} x\n     * @param {number} y\n     * @returns {Uint8ClampedArray} The RGBA value\n     */\n    getRGBAAt(x, y) {\n        this.__check_boundaries__(x, y);\n        const idx = ((~~y - 1) * this.width + (~~x - 1)) * 4;\n        return this.bitmap.subarray(idx, idx + 4);\n    }\n\n    /**\n     * Sets the pixel color for the specified position\n     * @param {number} x\n     * @param {number} y\n     * @param {number} pixelColor\n     */\n    setPixelAt(x, y, pixelColor) {\n        x = ~~x;\n        y = ~~y;\n        this.__check_boundaries__(x, y);\n        this.__set_pixel__(x, y, pixelColor);\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @param {number} pixelColor\n     */\n    __set_pixel__(x, y, pixelColor) {\n        this.__view__.setUint32(((y - 1) * this.width + (x - 1)) * 4, pixelColor, false);\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     */\n    __check_boundaries__(x, y) {\n        if (isNaN(x)) throw new TypeError(`Invalid pixel coordinates (x=${x})`);\n        if (isNaN(y)) throw new TypeError(`Invalid pixel coordinates (y=${y})`);\n        if (x < 1)\n            throw new RangeError(`${Image.__out_of_bounds__} (x=${x})<1`);\n        if (x > this.width)\n            throw new RangeError(`${Image.__out_of_bounds__} (x=${x})>(width=${this.width})`);\n        if (y < 1)\n            throw new RangeError(`${Image.__out_of_bounds__} (y=${y})<1`);\n        if (y > this.height)\n            throw new RangeError(`${Image.__out_of_bounds__} (y=${y})>(height=${this.height})`);\n    }\n\n    /**\n     * @private\n     */\n    static get __out_of_bounds__() {\n        return 'Tried referencing a pixel outside of the images boundaries:';\n    }\n\n    /**\n     * @callback colorFunction\n     * @param {number} x\n     * @param {number} y\n     * @returns {number} pixel color\n     */\n\n    /**\n     * Fills the image data with the supplied color\n     * @param {number|colorFunction} color\n     * @returns {Image}\n     */\n    fill(color) {\n        const type = typeof color;\n        if (type !== 'function') {\n            this.__view__.setUint32(0, color, false);\n            this.__u32__.fill(this.__u32__[0]);\n        } else {\n            let offset = 0;\n            for (let y = 1; y <= this.height; y++) {\n                for (let x = 1; x <= this.width; x++) {\n                    this.__view__.setUint32(offset, color(x, y), false);\n                    offset += 4;\n                }\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Clones the current image\n     * @returns {Image}\n     */\n    clone() {\n        const image = Image.new(this.width, this.height);\n        image.bitmap.set(this.bitmap);\n        return image;\n    }\n\n    /**\n     * Use {@link https://en.wikipedia.org/wiki/Image_scaling#Nearest-neighbor_interpolation Nearest-neighbor} resizing.\n     * @returns {string}\n     */\n    static get RESIZE_NEAREST_NEIGHBOR() {\n        return 'RESIZE_NEAREST_NEIGHBOR';\n    }\n\n    /**\n     * Used for automatically preserving an images aspect ratio when resizing.\n     * @returns {number}\n     */\n    static get RESIZE_AUTO() {\n        return -1;\n    }\n\n    /**\n     * Resizes the image by the given factor\n     * @param {number} factor The factor to resize the image with\n     * @param {string} [mode=Image.RESIZE_NEAREST_NEIGHBOR] The resizing mode to use\n     * @returns {Image}\n     */\n    scale(factor, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const image = this.__scale__(factor, mode);\n        return this.__apply__(image);\n    }\n\n    __scale__(factor, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        if (factor === 1) return this;\n        return this.__resize__(this.width * factor, this.height * factor, mode);\n    }\n\n    /**\n     * Resizes the image to the given dimensions.\n     * Use {@link Image.RESIZE_AUTO} as either width or height to automatically preserve the aspect ratio.\n     * @param {number} width The new width\n     * @param {number} height The new height\n     * @param {string} [mode=Image.RESIZE_NEAREST_NEIGHBOR] The resizing mode to use\n     * @returns {Image} The resized image\n     */\n    resize(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        const image = this.__resize__(width, height, mode);\n        return this.__apply__(image);\n    }\n\n    __resize__(width, height, mode = Image.RESIZE_NEAREST_NEIGHBOR) {\n        if (width === Image.RESIZE_AUTO && height === Image.RESIZE_AUTO) throw new Error('RESIZE_AUTO can only be used for either width or height, not for both');\n        else if (width === Image.RESIZE_AUTO) width = this.width / this.height * height;\n        else if (height === Image.RESIZE_AUTO) height = this.height / this.width * width;\n\n        width = Math.floor(width);\n        height = Math.floor(height);\n        if (width < 1)\n            throw new RangeError('Image has to be at least 1 pixel wide');\n        if (height < 1)\n            throw new RangeError('Image has to be at least 1 pixel high');\n\n        let image;\n        if (mode === Image.RESIZE_NEAREST_NEIGHBOR)\n            image = this.__resize_nearest_neighbor__(width, height);\n        else throw new Error('Invalid resize mode');\n\n        return image;\n    }\n\n    /**\n     * @private\n     * @param {number} width The new width\n     * @param {number} height The new height\n     */\n    __resize_nearest_neighbor__(width, height) {\n        const image = new this.constructor(width, height);\n\n        for (let y = 0; y < height; y++) {\n            for (let x = 0; x < width; x++) {\n                const ySrc = Math.floor((y * this.height) / height);\n                const xSrc = Math.floor((x * this.width) / width);\n\n                const destPos = (y * width + x) * 4;\n                const srcPos = (ySrc * this.width + xSrc) * 4;\n\n                image.__view__.setUint32(destPos, this.__view__.getUint32(srcPos, false), false);\n            }\n        }\n\n        return image;\n    }\n\n    /**\n     * Crops an image to the specified dimensions\n     * @param {number} x The x offset\n     * @param {number} y The y offset\n     * @param {number} width The new images width\n     * @param {number} height The new images height\n     * @returns {Image}\n     */\n    crop(x, y, width, height) {\n        if (width > this.width) width = this.width;\n        if (height > this.height) height = this.height;\n\n        return this.__apply__(this.__crop__(x, y, width, height));\n    }\n\n    /**\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @returns {Image}\n     * @private\n     */\n    __crop__(x, y, width, height) {\n        x = ~~x;\n        y = ~~y;\n\n        const image = new this.constructor(width, height);\n\n        for (let tY = 0; tY < height; tY++) {\n            const idx = (tY + y) * this.width + x;\n            image.__u32__.set(this.__u32__.subarray(idx, idx + width), tY * width);\n        }\n\n        return image;\n    }\n\n    /**\n     * Draws a box at the specified coordinates\n     * @param {number} x The x offset\n     * @param {number} y The y offset\n     * @param {number} width The box width\n     * @param {number} height The box height\n     * @param {number|colorFunction} color The color to fill the box in with\n     * @returns {Image}\n     */\n    drawBox(x, y, width, height, color) {\n        x -= 1;\n        y -= 1;\n\n        if (typeof color === 'function') {\n            for (let tY = 1; tY <= height; tY++) {\n                for (let tX = 1; tX <= width; tX++) {\n                    const nX = tX + x;\n                    const nY = tY + y;\n                    if (Math.min(nX, nY) < 1 || nX > this.width || nY > this.height)\n                        continue;\n\n                    const tC = color(tX, tY);\n                    this.__set_pixel__(nX, nY, tC);\n                }\n            }\n        } else return this.__fast_box__(x, y, width, height, color);\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} x\n     * @param {number} y\n     * @param {number} width\n     * @param {number} height\n     * @param {number} color\n     */\n    __fast_box__(x, y, width, height, color) {\n        if (x < 0) {\n            width += x;\n            x = 1;\n        }\n\n        if (y < 0) {\n            height += y;\n            y = 1;\n        }\n\n        const right = Math.max(Math.min(x + width, this.width), 1);\n        let xPos = right;\n        while (x <= --xPos)\n            this.__view__.setUint32(4 * (xPos + y * this.width), color);\n        const end = 4 * (right + y * this.width);\n        const start = 4 * (x + y * this.width);\n\n        let bottom = Math.max(Math.min(y + height, this.height), 1);\n        while (y < --bottom)\n            this.bitmap.copyWithin(4 * (x + bottom * this.width), start, end);\n\n        return this;\n    }\n\n    /**\n     * Draws a circle at the specified coordinates with the specified radius\n     * @param {number} x The center x position\n     * @param {number} y The center y position\n     * @param {number} radius The circles radius\n     * @param {number|colorFunction} color\n     * @returns {Image}\n     */\n    drawCircle(x, y, radius, color) {\n        const radSquared = radius ** 2;\n        for (let currentY = Math.max(1, y - radius); currentY <= Math.min(y + radius, this.height); currentY++) {\n            for (let currentX = Math.max(1, x - radius); currentX <= Math.min(x + radius, this.width); currentX++) {\n                if ((currentX - x) ** 2 + (currentY - y) ** 2 < radSquared)\n                    this.__set_pixel__(currentX, currentY, typeof color === 'function' ? color(currentX - x + radius, currentY - y + radius) : color);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Crops the image into a circle\n     * @param {boolean} [max=false] Whether to use the larger dimension for the size\n     * @param {number} [feathering=0] How much feathering to apply to the edges\n     * @returns {Image}\n     */\n    cropCircle(max = false, feathering = 0) {\n        const rad = Math[max ? 'max' : 'min'](this.width, this.height) / 2;\n        const radSquared = rad ** 2;\n        const centerX = this.width / 2;\n        const centerY = this.height / 2;\n\n        for (const [x, y] of this) {\n            const distanceFromCenter = (x - centerX) ** 2 + (y - centerY) ** 2;\n            const alphaIdx = ((y - 1) * this.width + (x - 1)) * 4 + 3;\n            if (distanceFromCenter > radSquared)\n                this.bitmap[alphaIdx] = 0;\n            else if (feathering)\n                this.bitmap[alphaIdx] *= Math.max(0, Math.min(1, 1 - (distanceFromCenter / radSquared) * feathering ** (1 / 2)));\n        }\n\n        return this;\n    }\n\n    /**\n     * Sets the images opacity\n     * @param {number} opacity The opacity to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current opacity (false) or just set the new opacity (true)\n     * @returns {Image}\n     */\n    opacity(opacity, absolute = false) {\n        if (isNaN(opacity) || opacity < 0)\n            throw new RangeError('Invalid opacity value');\n\n        this.__set_channel_value__(opacity, absolute, 3);\n\n        return this;\n    }\n\n    /**\n     * Sets the red channels saturation\n     * @param {number} saturation The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    red(saturation, absolute = false) {\n        if (isNaN(saturation) || saturation < 0)\n            throw new RangeError('Invalid saturation value');\n\n        this.__set_channel_value__(saturation, absolute, 0);\n\n        return this;\n    }\n\n    /**\n     * Sets the green channels saturation\n     * @param {number} saturation The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    green(saturation, absolute = false) {\n        if (isNaN(saturation) || saturation < 0)\n            throw new RangeError('Invalid saturation value');\n\n        this.__set_channel_value__(saturation, absolute, 1);\n\n        return this;\n    }\n\n    /**\n     * Sets the blue channels saturation\n     * @param {number} saturation The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    blue(saturation, absolute = false) {\n        if (isNaN(saturation) || saturation < 0)\n            throw new RangeError('Invalid saturation value');\n\n        this.__set_channel_value__(saturation, absolute, 2);\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} value\n     * @param {boolean} absolute\n     * @param {number} offset\n     */\n    __set_channel_value__(value, absolute, offset) {\n        for (let i = offset; i < this.bitmap.length; i += 4)\n            this.bitmap[i] = value * (absolute ? 255 : this.bitmap[i]);\n    }\n\n    /**\n     * Sets the brightness of the image\n     * @param {number} value The lightness to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current lightness (false) or just set the new lightness (true)\n     * @returns {Image}\n     */\n    lightness(value, absolute = false) {\n        if (isNaN(value) || value < 0)\n            throw new RangeError('Invalid lightness value');\n\n        return this.fill((x, y) => {\n            const [h, s, l, a] = Image.rgbaToHSLA(...this.getRGBAAt(x, y));\n            return Image.hslaToColor(h, s, value * (absolute ? 1 : l), a);\n        });\n    }\n\n    /**\n     * Sets the saturation of the image\n     * @param {number} value The saturation to apply (0..1)\n     * @param {boolean} absolute Whether to scale the current saturation (false) or just set the new saturation (true)\n     * @returns {Image}\n     */\n    saturation(value, absolute = false) {\n        if (isNaN(value) || value < 0)\n            throw new RangeError('Invalid saturation value');\n\n        return this.fill((x, y) => {\n            const [h, s, l, a] = Image.rgbaToHSLA(...this.getRGBAAt(x, y));\n            return Image.hslaToColor(h, value * (absolute ? 1 : s), l, a);\n        });\n    }\n\n    /**\n     * Composites (overlays) the source onto this image at the specified coordinates\n     * @param {Image} source The image to place\n     * @param {number} [x=0] The x position to place the image at\n     * @param {number} [y=0] The y position to place the image at\n     * @returns {Image}\n     */\n    composite(source, x = 0, y = 0) {\n        x = ~~x;\n        y = ~~y;\n\n        for (let yy = 0; yy < source.height; yy++) {\n            let y_offset = y + yy;\n            if (y_offset < 0) continue;\n            if (y_offset >= this.height) break;\n\n            for (let xx = 0; xx < source.width; xx++) {\n                let x_offset = x + xx;\n                if (x_offset < 0) continue;\n                if (x_offset >= this.width) break;\n\n                const offset = 4 * (x_offset + y_offset * this.width);\n                const fg = source.__view__.getUint32(4 * (xx + yy * source.width), false);\n                const bg = this.__view__.getUint32(offset, false);\n\n                if ((fg & 0xff) === 0xff) this.__view__.setUint32(offset, fg, false);\n                else if ((fg & 0xff) === 0x00) this.__view__.setUint32(offset, bg, false);\n                else this.__view__.setUint32(offset, Image.__alpha_blend__(fg, bg), false);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @private\n     * @param {number} fg\n     * @param {number} bg\n     * @returns {number}\n     */\n    static __alpha_blend__(fg, bg) {\n        const fa = fg & 0xff;\n        const alpha = fa + 1;\n        const inv_alpha = 256 - fa;\n        const r = (alpha * (fg >>> 24) + inv_alpha * (bg >>> 24)) >> 8;\n        const b = (alpha * (fg >> 8 & 0xff) + inv_alpha * (bg >> 8 & 0xff)) >> 8;\n        const g = (alpha * (fg >> 16 & 0xff) + inv_alpha * (bg >> 16 & 0xff)) >> 8;\n        return (((r & 0xff) << 24) | ((g & 0xff) << 16) | ((b & 0xff) << 8) | (Math.max(fa, bg & 0xff) & 0xff));\n    }\n\n    /**\n     * Inverts the images colors\n     * @returns {Image}\n     */\n    invert() {\n        for (const [x, y, color] of this.iterateWithColors())\n            this.__set_pixel__(x, y, ((0xffffffff - color) & 0xffffff00) | (color & 0xff));\n\n        return this;\n    }\n\n    /**\n     * Inverts the images value (lightness)\n     * @returns {Image}\n     */\n    invertValue() {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(h, s, 1 - l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Inverts the images saturation\n     * @returns {Image}\n     */\n    invertSaturation() {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(h, 1 - s, l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Inverts the images hue\n     * @returns {Image}\n     */\n    invertHue() {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(1 - h, s, l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Shifts the images hue\n     * @param {number} degrees How many degrees to shift the hue by\n     */\n    hueShift(degrees) {\n        for (const [x, y, color] of this.iterateWithColors()) {\n            const [h, s, l, a] = Image.rgbaToHSLA(...Image.colorToRGBA(color));\n            this.__set_pixel__(x, y, Image.hslaToColor(h + degrees / 360, s, l, a));\n        }\n\n        return this;\n    }\n\n    /**\n     * Gets the average color of the image\n     * @returns {number}\n     */\n    averageColor() {\n        let colorAvg = [0, 0, 0];\n        let divisor = 0;\n        for (let idx = 0; idx < this.bitmap.length; idx += 4) {\n            const rgba = this.bitmap.subarray(idx, idx + 4);\n            for (let i = 0; i < 3; i++)\n                colorAvg[i] += rgba[i];\n            divisor += rgba[3] / 255;\n        }\n\n        return Image.rgbaToColor(...colorAvg.map(v => v / divisor), 0xff);\n    }\n\n    /**\n     * Gets the images dominant color\n     * @param {boolean} [ignoreBlack=true] Whether to ignore dark colors below the threshold\n     * @param {boolean} [ignoreWhite=true] Whether to ignore light colors above the threshold\n     * @param {number} [bwThreshold=0xf] The black/white threshold (0-64)\n     * @return {number} The images dominant color\n     */\n    dominantColor(ignoreBlack = true, ignoreWhite = true, bwThreshold = 0xf) {\n        const colorCounts = new Array(0x3ffff);\n        for (let i = 0; i < this.bitmap.length; i += 4) {\n            const color = this.__view__.getUint32(i, false);\n            const [h, s, l] = Image.rgbaToHSLA(...Image.colorToRGBA(color)).map(v => (~~(v * 0x3f)));\n            if (ignoreBlack && l < bwThreshold) continue;\n            if (ignoreWhite && l > 0x3f - bwThreshold) continue;\n            const key = h << 12 | s << 6 | l;\n            colorCounts[key] = (colorCounts[key] || 0) + 1;\n        }\n\n        let maxColorCount = -1;\n        let mostProminentValue = 0;\n        colorCounts.forEach((el, i) => {\n            if (el < maxColorCount) return;\n            maxColorCount = el;\n            mostProminentValue = i;\n        });\n\n        if (mostProminentValue === -1)\n            return this.dominantColor(ignoreBlack, ignoreWhite, bwThreshold - 1);\n\n        const h = (mostProminentValue >>> 12) & 0x3f;\n        const s = (mostProminentValue >>> 6) & 0x3f;\n        const l = mostProminentValue & 0x3f;\n\n        return Image.hslaToColor(h / 0x3f, s / 0x3f, l / 0x3f, 1);\n    }\n\n    /**\n     * Rotates the image the given amount of degrees\n     * @param {number} angle The angle to rotate the image for (in degrees)\n     * @param {boolean} resize Whether to resize the image so it fits all pixels or just ignore outlying pixels\n     */\n    rotate(angle, resize = true) {\n        if (angle % 360 === 0) return this;\n        if (angle % 180 === 0) return this.__rotate_180__();\n\n        const rad = Math.PI * (angle / 180);\n\n        const sin = Math.sin(rad);\n        const cos = Math.cos(rad);\n\n        const width = resize\n            ? Math.abs(this.width * sin) + Math.abs(this.height * cos)\n            : this.width;\n        const height = resize\n            ? Math.abs(this.width * cos) + Math.abs(this.height * sin)\n            : this.height;\n\n        const out = Image.new(width, height);\n\n        const out_cx = width / 2 - .5;\n        const out_cy = height / 2 - .5;\n        const src_cx = this.width / 2 - .5;\n        const src_cy = this.height / 2 - .5;\n\n        let h = 0;\n        do {\n            let w = 0;\n            const ysin = src_cx - sin * (h - out_cy);\n            const ycos = src_cy + cos * (h - out_cy);\n\n            do {\n                const xf = ysin + cos * (w - out_cx);\n                const yf = ycos + sin * (w - out_cx);\n                Image.__interpolate__(this, out, w, h, xf, yf);\n            } while (w++ < width);\n        } while (h++ < height);\n\n        return this.__apply__(out);\n    }\n\n    /**\n     * @returns {Image}\n     * @private\n     */\n    __rotate_180__() {\n        let offset = 0;\n        this.bitmap.reverse();\n        while (offset < this.bitmap.length) this.bitmap.subarray(offset, offset += 4).reverse();\n\n        return this;\n    }\n\n    /**\n     * @param {Image} src\n     * @param {Image} out\n     * @param {number} x0\n     * @param {number} y0\n     * @param {number} x1\n     * @param {number} y1\n     * @private\n     */\n    static __interpolate__(src, out, x0, y0, x1, y1) {\n        const x2 = ~~x1;\n        const y2 = ~~y1;\n        const xq = x1 - x2;\n        const yq = y1 - y2;\n        const out_slice = out.bitmap.subarray(4 * (x0 + y0 * out.width), -4);\n\n        const ref = {\n            r: 0,\n            g: 0,\n            b: 0,\n            a: 0,\n        };\n\n        Image.__pawn__(x2, y2, (1 - xq) * (1 - yq), ref, src);\n        Image.__pawn__(1 + x2, y2, xq * (1 - yq), ref, src);\n        Image.__pawn__(x2, 1 + y2, (1 - xq) * yq, ref, src);\n        Image.__pawn__(1 + x2, 1 + y2, xq * yq, ref, src);\n\n        out_slice[3] = ref.a;\n        out_slice[0] = ref.r / ref.a;\n        out_slice[1] = ref.g / ref.a;\n        out_slice[2] = ref.b / ref.a;\n    }\n\n    /** @private */\n    static __pawn__(point0, point1, weight, ref, src) {\n        if (\n            point0 > 0\n            && point1 > 0\n            && point0 < src.width\n            && point1 < src.height\n        ) {\n            const offset = 4 * (point0 + point1 * src.width);\n            const src_slice = src.bitmap.subarray(offset, offset + 4);\n\n            const wa = weight * src_slice[3];\n\n            ref.a += wa;\n            ref.r += wa * src_slice[0];\n            ref.g += wa * src_slice[1];\n            ref.b += wa * src_slice[2];\n        }\n    }\n\n    /**\n     * @private\n     * @param {Image} image\n     * @returns {Image}\n     */\n    __apply__(image) {\n        this.__width__ = image.__width__;\n        this.__height__ = image.__height__;\n        this.__view__ = image.__view__;\n        this.__u32__ = image.__u32__;\n        this.bitmap = image.bitmap;\n\n        return this;\n    }\n\n    /**\n     * Creates a multi-point gradient generator\n     * @param {Object<number, number>} colors The gradient points to use (e.g. `{0: 0xff0000ff, 1: 0x00ff00ff}`)\n     * @return {(function(number): number)} The gradient generator. The function argument is the position in the gradient (0..1).\n     */\n    static gradient(colors) {\n        const entries = Object.entries(colors).sort((a, b) => a[0] - b[0]);\n        const positions = entries.map(e => parseFloat(e[0]));\n        const values = entries.map(e => e[1]);\n\n        if (positions.length === 0) throw new RangeError('Invalid gradient point count');\n        else if (positions.length === 1) {\n            return () => values[0];\n        } else if (positions.length === 2) {\n            const gradient = this.__gradient__(values[0], values[1]);\n            return position => {\n                if (position <= positions[0]) return values[0];\n                if (position >= positions[1]) return values[1];\n                return gradient((position - positions[0]) / (positions[1] - positions[0]));\n            };\n        }\n\n        const minDef = Math.min(...positions);\n        const maxDef = Math.max(...positions);\n        let gradients = [];\n\n        for (let i = 0; i < positions.length; i++) {\n            let minPos = positions[i - 1];\n            if (minPos === undefined) continue;\n\n            let maxPos = positions[i];\n\n            let minVal = values[i - 1];\n            if (minVal === undefined) minVal = values[i];\n\n            const maxVal = values[i];\n            const gradient = this.__gradient__(minVal, maxVal);\n\n            gradients.push({min: minPos, max: maxPos, gradient});\n        }\n\n        return position => {\n            if (position <= minDef) return gradients[0].gradient(0);\n            if (position >= maxDef) return gradients[gradients.length - 1].gradient(1);\n\n            for (const gradient of gradients)\n                if (position >= gradient.min && position <= gradient.max)\n                    return gradient.gradient((position - gradient.min) / (gradient.max - gradient.min));\n            throw new RangeError(`Invalid gradient position: ${position}`);\n        };\n    }\n\n    /**\n     * Rounds the images corners\n     * @param {number} [radius=min(width,height)/4] The radius of the corners\n     * @return {Image}\n     */\n    roundCorners(radius = Math.min(this.width, this.height) / 4) {\n        const radSquared = radius ** 2;\n        for (let x = 1; x <= radius; x++) {\n            const xRad = (x - radius) ** 2;\n            for (let y = 1; y <= radius; y++) {\n                if (xRad + (y - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        for (let x = 1; x <= radius; x++) {\n            const xRad = (x - radius) ** 2;\n            for (let y = this.height - radius; y <= this.height; y++) {\n                if (xRad + ((this.height - y) - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        for (let x = this.width - radius; x <= this.width; x++) {\n            const xRad = ((this.width - x) - radius) ** 2;\n            for (let y = 1; y <= radius; y++) {\n                if (xRad + (y - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        for (let x = this.width - radius; x <= this.width; x++) {\n            const xRad = ((this.width - x) - radius) ** 2;\n            for (let y = this.height - radius; y <= this.height; y++) {\n                if (xRad + ((this.height - y) - radius) ** 2 > radSquared)\n                    this.bitmap[((y - 1) * this.width + x - 1) * 4 + 3] = 0;\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * @private\n     */\n    static __gradient__(startColor, endColor) {\n        const sr = startColor >>> 24;\n        const sg = startColor >> 16 & 0xff;\n        const sb = startColor >> 8 & 0xff;\n        const sa = startColor & 0xff;\n        const er = (endColor >>> 24) - sr;\n        const eg = (endColor >> 16 & 0xff) - sg;\n        const eb = (endColor >> 8 & 0xff) - sb;\n        const ea = (endColor & 0xff) - sa;\n\n        return position => {\n            const r = sr + position * er;\n            const g = sg + position * eg;\n            const b = sb + position * eb;\n            const a = sa + position * ea;\n            return (((r & 0xff) << 24) | ((g & 0xff) << 16) | ((b & 0xff) << 8) | (a & 0xff));\n        };\n    }\n\n    /**\n     * Encodes the image into a PNG\n     * @param {number} compression The compression level to use (0-3)\n     * @return {Promise<Uint8Array>} The encoded data\n     */\n    async encode(compression = 1) {\n        return await png.encode(this.bitmap, {width: this.width, height: this.height, level: compression, channels: 4});\n    }\n\n    /**\n     * Encodes the image into a JPEG\n     * @param {number} [quality=90] The JPEG quality to use\n     * @return {Promise<Uint8Array>}\n     */\n    async encodeJPEG(quality = 90) {\n        quality = Math.max(1, Math.min(100, quality));\n        const jpegCanvas = new this.constructor(this.width, this.height);\n        jpegCanvas.fill(0xff);\n        jpegCanvas.composite(this);\n        return jpeglib.encode(this.width, this.height, quality, jpegCanvas.bitmap);\n    }\n\n    /**\n     * Decodes an image (PNG, JPEG or TIFF)\n     * @param {Buffer|Uint8Array} data The binary data to decode\n     * @return {Promise<Image>} The decoded image\n     */\n    static async decode(data) {\n        let image;\n\n        let view;\n        if (!ArrayBuffer.isView(data)) {\n            data = new Uint8Array(data);\n            view = new DataView(data.buffer);\n        } else {\n            data = new Uint8Array(data.buffer, data.byteOffset, data.byteLength);\n            view = new DataView(data.buffer, data.byteOffset, data.byteLength);\n        }\n\n        if (view.getUint32(0, false) === 0x89504e47) { // PNG\n            const {width, height, pixels} = await png.decode(data);\n            image = new this(width, height);\n            image.bitmap.set(pixels);\n        } else if ((view.getUint32(0, false) >>> 8) === 0xffd8ff) { // JPEG\n            const status = await jpeglib.decode(0, data, 0, 0);\n            if (status === 1) throw new Error('Failed decoding JPEG image');\n            const [pixelType, width, height] = jpeglib.meta(0);\n            image = new this(width, height);\n            const buffer = jpeglib.buffer(0);\n            jpeglib.free(0);\n\n            if (pixelType === 0) {\n                const view = new DataView(image.bitmap.buffer);\n\n                for (let i = 0; i < buffer.length; i++) {\n                    const pixel = buffer[i];\n                    view.setUint32(i * 4, pixel << 24 | pixel << 16 | pixel << 8 | 0xff, false);\n                }\n            } else if (pixelType === 1) {\n                image.bitmap.fill(0xff);\n                for (let i = 0; i < width * height; i++)\n                    image.bitmap.set(buffer.subarray(i * 3, i * 3 + 3), i * 4);\n            } else if (pixelType === 2) {\n                for (let i = 0; i < buffer.length; i += 4) {\n                    image.bitmap[i] = 0xff * (1 - buffer[i] / 0xff) * (1 - buffer[i + 3] / 0xff);\n                    image.bitmap[i + 1] = 0xff * (1 - buffer[i + 1] / 0xff) * (1 - buffer[i + 3] / 0xff);\n                    image.bitmap[i + 2] = 0xff * (1 - buffer[i + 2] / 0xff) * (1 - buffer[i + 3] / 0xff);\n                    image.bitmap[i + 3] = 0xff;\n                }\n            }\n        } else if (view.getUint32(0, false) === 0x49492a00) {\n            const status = await tifflib.decode(0, data);\n            if (status === 1) throw new Error('Failed decoding TIFF image');\n            const meta = tifflib.meta(0);\n            const buffer = tifflib.buffer(0);\n            tifflib.free(0);\n\n            image = new this(...meta);\n            image.bitmap.set(buffer);\n        } else throw new Error('Unsupported image type');\n\n        return image;\n    }\n\n    /**\n     * Scale the SVG by the given amount. For use with {@link Image.renderSVG}\n     * @return {number}\n     */\n    static get SVG_MODE_SCALE() {\n        return 1;\n    }\n\n    /**\n     * Scale the SVG to fit the given width. For use with {@link Image.renderSVG}\n     * @return {number}\n     */\n    static get SVG_MODE_WIDTH() {\n        return 2;\n    }\n\n    /**\n     * Scale the SVG to fit the given height. For use with {@link Image.renderSVG}\n     * @return {number}\n     */\n    static get SVG_MODE_HEIGHT() {\n        return 3;\n    }\n\n    /**\n     * Creates a new image from the given SVG\n     * @param {string} svg The SVG content\n     * @param {number} size The size to use\n     * @param {number} mode The SVG resizing mode to use (one of {@link SVG_MODE_SCALE}, {@link SVG_MODE_WIDTH}, {@link SVG_MODE_HEIGHT})\n     * @return {Promise<Image>} The rendered SVG graphic\n     */\n    static async renderSVG(svg, size = 1, mode = this.SVG_MODE_SCALE) {\n        if (![this.SVG_MODE_WIDTH, this.SVG_MODE_HEIGHT, this.SVG_MODE_SCALE].includes(mode))\n            throw new Error('Invalid SVG scaling mode');\n\n        if (mode === this.SVG_MODE_SCALE && size <= 0)\n            throw new RangeError('SVG scale must be > 0');\n        if (mode !== this.SVG_MODE_SCALE && size < 1)\n            throw new RangeError('SVG size must be >= 1')\n\n        if (typeof svg !== 'string')\n            svg = svg.toString();\n\n        const status = await svglib.rgba(0, svg, mode, size, size, size);\n        if (status === 1) throw new Error('Failed parsing SVG');\n        if (status === 2) throw new Error('Failed rendering SVG');\n        const meta = svglib.meta(0);\n        const image = new this(...meta);\n        image.bitmap.set(svglib.buffer(0));\n        svglib.free(0);\n        return image;\n    }\n\n    /**\n     * Wrap at individual characters. For use with {@link Image.renderText}\n     * @return {boolean}\n     */\n    static get WRAP_STYLE_CHAR() {\n        return true;\n    }\n\n    /**\n     * Wrap at word ends. For use with {@link Image.renderText}\n     * @return {boolean}\n     */\n    static get WRAP_STYLE_WORD() {\n        return false;\n    }\n\n    /**\n     * Creates a new image containing the rendered text.\n     * @param {Uint8Array} font TrueType (ttf/ttc) or OpenType (otf) font buffer to use\n     * @param {number} scale Font size to use\n     * @param {string} text Text to render\n     * @param {number} color Text color to use\n     * @param {number} wrapWidth Image width before wrapping\n     * @param {boolean} wrapStyle Whether to break at words ({@link WRAP_STYLE_WORD}) or at characters ({@link WRAP_STYLE_CHAR})\n     * @return {Promise<Image>} The rendered text\n     */\n    static async renderText(font, scale, text, color = 0xffffffff, wrapWidth = Infinity, wrapStyle = this.WRAP_STYLE_WORD) {\n        const [r, g, b, a] = Image.colorToRGBA(color);\n        await fontlib.load(0, font, scale);\n        fontlib.render(0, 0, scale, r, g, b, text, wrapWidth === Infinity ? null : wrapWidth, wrapStyle);\n        const buffer = fontlib.buffer(0);\n        const [width, height] = fontlib.meta(0);\n        fontlib.free(0);\n        const image = new this(width, height);\n        image.bitmap.set(buffer);\n        image.opacity(a / 0xff);\n\n        return image;\n    }\n\n}\n\n/**\n * Represents a frame in a GIF\n * @extends Image\n */\nclass Frame extends Image {\n    /**\n     * Creates a new, blank frame\n     * @param {number} width\n     * @param {number} height\n     * @param {number} [duration = 100] The frames duration (in ms)\n     * @return {Frame}\n     */\n    constructor(width, height, duration = 100) {\n        if (isNaN(duration) || duration < 0)\n            throw new RangeError('Invalid frame duration');\n\n        super(width, height);\n        this.duration = duration;\n    }\n\n    toString() {\n        return `Frame<${this.width}x${this.height}x${this.duration}ms>`;\n    }\n\n    /**\n     * Converts an Image instance to a Frame, cloning it in the process\n     * @param {Image} image The image to create the frame from\n     * @param {number} [duration = 100] The frames duration (in ms)\n     * @return {Frame}\n     */\n    static from(image, duration) {\n        if (!(image instanceof Image))\n            throw new TypeError('Invalid image passed');\n        const frame = new Frame(image.width, image.height, duration);\n        frame.bitmap.set(image.bitmap);\n\n        return frame;\n    }\n}\n\n/**\n * Represents a GIF image as an array of frames\n * @extends Array<Frame>\n */\nclass GIF extends Array {\n    /**\n     * Creates a new GIF image.\n     * @param {Frame[]} frames The frames to create the GIF from\n     * @param {number} [loopCount=0] How often to loop the GIF for (-1 = unlimited)\n     * @property {number} loopCount How often the GIF will loop for\n     */\n    constructor(frames, loopCount = -1) {\n        super(...frames);\n\n        this.width = frames[0].width;\n        this.height = frames[0].height;\n\n        for (const frame of this) {\n            if (!(frame instanceof Frame))\n                throw new TypeError(`Frame ${this.indexOf(frame)} is not an instance of Frame`);\n\n            if (frame.width !== this.width) throw new Error('Frames have different widths');\n            if (frame.height !== this.height) throw new Error('Frames have different heights');\n        }\n\n        if (loopCount < -1 || isNaN(loopCount))\n            throw new RangeError('Invalid loop count');\n\n        this.loopCount = loopCount;\n    }\n\n    toString() {\n        return `GIF<${this.width}x${this.height}x${this.duration}ms>`;\n    }\n\n    /**\n     * The GIFs duration (in ms)\n     * @return {number}\n     */\n    get duration() {\n        return [...this].reduce((acc, frame) => acc + frame.duration, 0);\n    }\n\n    /**\n     * Encodes the image into a GIF\n     * @param {number} [quality=10] GIF quality ((best) 1..30 (worst))\n     * @return {Promise<Uint8Array>} The encoded data\n     */\n    async encode(quality = 10) {\n        const encoder = await giflib.GIFEncoder.initialize(this.width, this.height, this.loopCount);\n        for (const frame of this) {\n            if (!(frame instanceof Frame)) throw new Error('GIF contains invalid frames');\n            encoder.add(~~(frame.duration / 10), quality, frame.bitmap);\n        }\n\n        const encoded = encoder.buffer();\n        encoder.free();\n        return encoded;\n    }\n}\n\nmodule.exports = {Image, GIF, Frame};\n","module.exports = class Buffer {\n    static concat(...arrays) {\n        const array = new Uint8Array(\n            arrays.reduce((length, array) => length + array.length, 0)\n        );\n\n        let offset = 0;\n        for (const x of arrays) {\n            array.set(x, offset);\n            offset += x.length;\n        }\n\n        return array;\n    }\n};","const table = new Uint32Array([\n    0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F,\n    0xE963A535, 0x9E6495A3, 0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988,\n    0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 0x1DB71064, 0x6AB020F2,\n    0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,\n    0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9,\n    0xFA0F3D63, 0x8D080DF5, 0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172,\n    0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 0x35B5A8FA, 0x42B2986C,\n    0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59,\n    0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423,\n    0xCFBA9599, 0xB8BDA50F, 0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924,\n    0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D, 0x76DC4190, 0x01DB7106,\n    0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,\n    0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D,\n    0x91646C97, 0xE6635C01, 0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E,\n    0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 0x65B0D9C6, 0x12B7E950,\n    0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65,\n    0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7,\n    0xA4D1C46D, 0xD3D6F4FB, 0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0,\n    0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 0x5005713C, 0x270241AA,\n    0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F,\n    0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81,\n    0xB7BD5C3B, 0xC0BA6CAD, 0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A,\n    0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 0xE3630B12, 0x94643B84,\n    0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1,\n    0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB,\n    0x196C3671, 0x6E6B06E7, 0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC,\n    0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 0xD6D6A3E8, 0xA1D1937E,\n    0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B,\n    0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55,\n    0x316E8EEF, 0x4669BE79, 0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236,\n    0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 0xC5BA3BBE, 0xB2BD0B28,\n    0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D,\n    0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F,\n    0x72076785, 0x05005713, 0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38,\n    0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 0x86D3D2D4, 0xF1D4E242,\n    0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777,\n    0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69,\n    0x616BFFD3, 0x166CCF45, 0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2,\n    0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 0xAED16A4A, 0xD9D65ADC,\n    0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9,\n    0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693,\n    0x54DE5729, 0x23D967BF, 0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94,\n    0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D]);\n\nmodule.exports = function crc32(buffer) {\n    let offset = 0;\n    let crc = 0xFFFFFFFF;\n\n    while (offset < buffer.length - 4) {\n        crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n        crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n        crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n        crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n    }\n\n    while (offset < buffer.length) {\n        crc = table[(crc ^ buffer[offset++]) & 0xff] ^ (crc >>> 8);\n    }\n\n    return (crc ^ 0xFFFFFFFF) >>> 0;\n};","/* global SharedArrayBuffer */\nconst crc32 = require('./crc32.js');\nconst Buffer = require('./buffer');\nconst {compress, decompress} = require('./wasm/zlib.js');\n\nconst __IHDR__ = new Uint8Array([73, 72, 68, 82]);\nconst __IDAT__ = new Uint8Array([73, 68, 65, 84]);\nconst __IEND__ = new Uint8Array([73, 69, 78, 68]);\nconst __IEND_CRC__ = crc32(new Uint8Array([73, 69, 78, 68]));\nconst HEAD = new Uint8Array([137, 80, 78, 71, 13, 10, 26, 10]);\n\nconst color_types = {\n    GREYSCALE: 0,\n    TRUECOLOR: 2,\n    INDEXED_COLOR: 3,\n    GREYSCALE_ALPHA: 4,\n    TRUECOLOR_ALPHA: 6\n};\n\nconst channels_to_color_type = {\n    1: color_types.GREYSCALE,\n    2: color_types.GREYSCALE_ALPHA,\n\n    3: color_types.TRUECOLOR,\n    4: color_types.TRUECOLOR_ALPHA\n};\n\nmodule.exports = {\n    async encode(data, {width, height, channels, depth = 8, level = 0}) {\n        let offset = 0;\n        let tmp_offset = 0;\n        const row_length = width * channels;\n        const tmp = new Uint8Array(height + data.length);\n\n        while (offset < data.length) {\n            tmp[tmp_offset++] = 0;\n            tmp.set(data.subarray(offset, (offset += row_length)), tmp_offset);\n\n            tmp_offset += row_length;\n        }\n\n        const compressed = await compress(tmp, level);\n        const array = new Uint8Array(49 + HEAD.length + compressed.length);\n\n        array[26] = 0;\n        array[27] = 0;\n        array[28] = 0;\n        array[24] = depth;\n        array.set(HEAD, 0);\n        array.set(__IHDR__, 12);\n        array.set(__IDAT__, 37);\n        array.set(compressed, 41);\n        array.set(__IEND__, 49 + compressed.length);\n        array[25] = channels_to_color_type[channels];\n\n        const view = new DataView(array.buffer);\n\n        view.setUint32(8, 13);\n        view.setUint32(16, width);\n        view.setUint32(20, height);\n        view.setUint32(33, compressed.length);\n        view.setUint32(45 + compressed.length, 0);\n        view.setUint32(53 + compressed.length, __IEND_CRC__);\n        view.setUint32(29, crc32(new Uint8Array(array.buffer, 12, 17)));\n        view.setUint32(41 + compressed.length, crc32(new Uint8Array(array.buffer, 37, 4 + compressed.length)));\n\n        return array;\n    },\n    async decode(array) {\n        let view = new DataView(array.buffer, array.byteOffset, array.byteLength);\n\n        const width = view.getUint32(16);\n        const height = view.getUint32(20);\n        const bpc = array[24];\n        const pixel_type = array[25];\n        let channels = ({3: 1, 0: 1, 4: 2, 2: 3, 6: 4})[pixel_type];\n        const bytespp = channels * bpc / 8;\n\n        const row_length = width * bytespp;\n        let pixels = new Uint8Array(height * row_length);\n\n        let offset = 0;\n        let p_offset = 0;\n\n        let c_offset = 33;\n        const chunks = [];\n\n        let palette, alphaPalette;\n\n        let type;\n        while (type !== 1229278788) {\n            type = view.getUint32(4 + c_offset);\n\n            // IDAT\n            if (type === 1229209940)\n                chunks.push(array.subarray(8 + c_offset, 8 + c_offset + view.getUint32(c_offset)));\n            else if (type === 1347179589) { // PLTE\n                if (palette)\n                    throw new Error('PLTE can only occur once in an image');\n                palette = new Uint32Array(view.getUint32(c_offset));\n                for (let pxlOffset = 0; pxlOffset < palette.length * 8; pxlOffset += 3)\n                    palette[pxlOffset / 3] = array[8 + c_offset + pxlOffset] << 24 | array[8 + c_offset + pxlOffset + 1] << 16 | array[8 + c_offset + pxlOffset + 2] << 8 | 0xff;\n            } else if (type === 1951551059) { // tRNS\n                if (alphaPalette)\n                    throw new Error('tRNS can only occur once in an image');\n                alphaPalette = new Uint8Array(view.getUint32(c_offset));\n                for (let i = 0; i < alphaPalette.length; i++)\n                    alphaPalette[i] = array[8 + c_offset + i];\n            }\n\n            c_offset += 4 + 4 + 4 + view.getUint32(c_offset);\n        }\n\n        array = await decompress(chunks.length === 1 ? chunks[0] : Buffer.concat(...chunks));\n\n        while (offset < array.byteLength) {\n            const filter = array[offset++];\n            const slice = array.subarray(offset, offset += row_length);\n\n            if (0 === filter) pixels.set(slice, p_offset);\n            else if (1 === filter) this.filter_1(slice, pixels, p_offset, bytespp, row_length);\n            else if (2 === filter) this.filter_2(slice, pixels, p_offset, bytespp, row_length);\n            else if (3 === filter) this.filter_3(slice, pixels, p_offset, bytespp, row_length);\n            else if (4 === filter) this.filter_4(slice, pixels, p_offset, bytespp, row_length);\n\n            p_offset += row_length;\n        }\n\n        if (pixel_type === 3) {\n            if (!palette)\n                throw new Error('Indexed color PNG has no PLTE');\n\n            if (alphaPalette)\n                for (let i = 0; i < alphaPalette.length; i++)\n                    palette[i] &= 0xffffff00 | alphaPalette[i];\n\n            channels = 4;\n            const newPixels = new Uint8Array(width * height * 4);\n            const pixelView = new DataView(newPixels.buffer, newPixels.byteOffset, newPixels.byteLength);\n            for (let i = 0; i < pixels.length; i++)\n                pixelView.setUint32(i * 4, palette[pixels[i]], false);\n            pixels = newPixels;\n        }\n\n        if (bpc !== 8) {\n            const newPixels = new Uint8Array(pixels.length / bpc * 8);\n            for (let i = 0; i < pixels.length; i += 2)\n                newPixels[i / 2] = pixels[i];\n            pixels = newPixels;\n        }\n\n        if (channels !== 4) {\n            const newPixels = new Uint8Array(width * height * 4);\n            const view = new DataView(newPixels.buffer);\n\n            if (channels === 1) {\n                for (let i = 0; i < width * height; i++) {\n                    const pixel = pixels[i];\n                    view.setUint32(i * 4, pixel << 24 | pixel << 16 | pixel << 8 | 0xff, false);\n                }\n            } else if (channels === 2) {\n                for (let i = 0; i < width * height * 2; i += 2) {\n                    const pixel = pixels[i];\n                    view.setUint32(i * 2, pixel << 24 | pixel << 16 | pixel << 8 | pixels[i + 1], false);\n                }\n            } else if (channels === 3) {\n                newPixels.fill(0xff);\n                for (let i = 0; i < width * height; i++)\n                    newPixels.set(pixels.subarray(i * 3, i * 3 + 3), i * 4);\n            }\n\n            pixels = newPixels;\n        }\n\n        return {width, height, pixels};\n    },\n\n    filter_1(slice, pixels, p_offset, bytespp, row_length) {\n        let i = 0;\n        while (i < bytespp) pixels[i + p_offset] = slice[i++];\n        while (i < row_length) pixels[i + p_offset] = slice[i] + pixels[i++ + p_offset - bytespp];\n    },\n\n    filter_2(slice, pixels, p_offset, bytespp, row_length) {\n        if (0 === p_offset) pixels.set(slice, p_offset);\n        else {\n            let i = 0;\n            while (i < row_length) pixels[i + p_offset] = slice[i] + pixels[i++ + p_offset - row_length];\n        }\n    },\n\n    filter_3(slice, pixels, p_offset, bytespp, row_length) {\n        let i = 0;\n\n        if (0 === p_offset) {\n            while (i < bytespp) pixels[i] = slice[i++];\n            while (i < row_length) pixels[i] = slice[i] + (pixels[i++ - bytespp] >> 1);\n        } else {\n            while (i < bytespp) pixels[i + p_offset] = slice[i] + (pixels[i++ + p_offset - row_length] >> 1);\n            while (i < row_length) pixels[i + p_offset] = slice[i] + (pixels[i + p_offset - bytespp] + pixels[i++ + p_offset - row_length] >> 1);\n        }\n    },\n\n    filter_4(slice, pixels, p_offset, bytespp, row_length) {\n        let i = 0;\n\n        if (0 === p_offset) {\n            while (i < bytespp) pixels[i] = slice[i++];\n            while (i < row_length) pixels[i] = slice[i] + pixels[i++ - bytespp];\n        } else {\n            while (i < bytespp) pixels[i + p_offset] = slice[i] + pixels[i++ + p_offset - row_length];\n\n            while (i < row_length) {\n                const a = pixels[i + p_offset - bytespp];\n                const b = pixels[i + p_offset - row_length];\n                const c = pixels[i + p_offset - bytespp - row_length];\n\n                const p = a + b - c;\n                const pa = Math.abs(p - a);\n                const pb = Math.abs(p - b);\n                const pc = Math.abs(p - c);\n\n                pixels[i + p_offset] = slice[i++] + ((pa <= pb && pa <= pc) ? a : ((pb <= pc) ? b : c));\n            }\n        }\n    }\n};\n","const {version} = require('../../package.json');\nlet u8array_ref, i32array_ref, u32array_ref, wasm;\n\nconst utf8encoder = new TextEncoder();\n\nfunction u8array() {\n    return u8array_ref.buffer === wasm.memory.buffer ? u8array_ref : (u8array_ref = new Uint8Array(wasm.memory.buffer));\n}\n\nfunction i32array() {\n    return i32array_ref.buffer === wasm.memory.buffer ? i32array_ref : (i32array_ref = new Int32Array(wasm.memory.buffer));\n}\n\nfunction u32array() {\n    return u32array_ref.buffer === wasm.memory.buffer ? u32array_ref : (u32array_ref = new Uint32Array(wasm.memory.buffer));\n}\n\nfunction ptr_to_u8array(ptr, len) {\n    return u8array().subarray(ptr, ptr + len);\n}\n\nfunction ptr_to_u32array(ptr, len) {\n    return u32array().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction u8array_to_ptr(buffer) {\n    const ptr = wasm.__wbindgen_malloc(buffer.length);\n    u8array().set(buffer, ptr);\n\n    return ptr;\n}\n\nfunction string_to_ptr(string) {\n    let offset = 0;\n    let len = string.length;\n    let ptr = wasm.__wbindgen_malloc(string.length);\n\n    const u8 = u8array();\n    while (len > offset) {\n        const code = string.charCodeAt(offset);\n\n        if (code > 0x7F) break;\n        u8[ptr + offset++] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) string = string.substring(offset);\n        ptr = wasm.__wbindgen_realloc(ptr, len, len = offset + string.length * 3);\n        const ret = utf8encoder.encodeInto(string, u8array().subarray(ptr + offset, ptr + len));\n\n        offset += ret.written;\n    }\n\n    return [ptr, offset];\n}\n\nconst nullish = x => x == null;\n\nmodule.exports = {\n    render(ptr, id, scale, r, g, b, text, max_width, wrap_style = false) {\n        const str = string_to_ptr(text);\n        wasm.render(ptr, id, scale, r, g, b, str[0], str[1], !nullish(max_width), max_width || 0, wrap_style);\n    },\n    buffer(id) {\n        wasm.buffer(8, id);\n        const i32 = i32array();\n        const slice = ptr_to_u8array(i32[2], i32[3]).slice();\n        wasm.__wbindgen_free(i32[2], i32[3]);\n\n        return slice;\n    },\n    meta(id) {\n        wasm.meta(8, id);\n        const i32 = i32array();\n        const slice = ptr_to_u32array(i32[2], i32[3]).slice();\n        wasm.__wbindgen_free(i32[2], 4 * i32[3]);\n\n        return slice;\n    },\n    async load(id, buffer, scale = 128) {\n        if (!wasm) {\n            const { instance } = await WebAssembly.instantiate(await fetch(`https://unpkg.com/imagescript@${version}/utils/wasm/font.wasm`).then(r => r.arrayBuffer()));\n\n            wasm = instance.exports;\n            u8array_ref = new Uint8Array(wasm.memory.buffer);\n            i32array_ref = new Int32Array(wasm.memory.buffer);\n            u32array_ref = new Uint32Array(wasm.memory.buffer);\n        }\n\n        wasm.load(id, u8array_to_ptr(buffer), buffer.length, scale);\n    },\n    free(id) {\n        wasm.free(id);\n    }\n}\n","const {version} = require('../../package.json');\nlet wasm;\n\nlet cachedTextDecoder = new TextDecoder('utf-8', {ignoreBOM: true, fatal: true});\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n\tif (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n\t\tcachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n\t}\n\treturn cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n\treturn cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n\tif (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n\t\tcachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n\t}\n\treturn cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n\treturn getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n\tconst ptr = malloc(arg.length * 1);\n\tgetUint8Memory0().set(arg, ptr / 1);\n\tWASM_VECTOR_LEN = arg.length;\n\treturn ptr;\n}\n\nclass GIFEncoder {\n\tfree() {\n\t\twasm.__wbg_gif_encoder_free(this.ptr);\n\t}\n\n\t/**\n\t * @param {number} width\n\t * @param {number} height\n\t * @param {number} repeat\n\t */\n\tstatic async initialize(width, height, repeat) {\n\t\tif (!wasm) {\n\t\t\tconst { instance } = await WebAssembly.instantiate(await fetch(`https://unpkg.com/imagescript@${version}/utils/wasm/gif.wasm`.then(r => r.arrayBuffer())), {\n\t\t\t\t__wbindgen_placeholder__: {\n\t\t\t\t\t__wbindgen_throw: function (arg0, arg1) {\n\t\t\t\t\t\tthrow new Error(getStringFromWasm0(arg0, arg1));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\t\t\twasm = instance.exports;\n\t\t}\n\n\t\tconst ret = wasm.gif_encoder_new(width, height, repeat);\n\t\treturn new GIFEncoder(ret);\n\t}\n\n\tconstructor(ptr) {\n\t\tthis.ptr = ptr;\n\t}\n\n\t/**\n\t * @returns {Uint8Array}\n\t */\n\tbuffer() {\n\t\ttry {\n\t\t\tconst retptr = wasm.__wbindgen_export_0.value - 16;\n\t\t\twasm.__wbindgen_export_0.value = retptr;\n\t\t\twasm.gif_encoder_buffer(retptr, this.ptr);\n\t\t\tconst r0 = getInt32Memory0()[retptr / 4];\n\t\t\tconst r1 = getInt32Memory0()[retptr / 4 + 1];\n\t\t\tconst v0 = getArrayU8FromWasm0(r0, r1).slice();\n\t\t\twasm.__wbindgen_free(r0, r1 * 1);\n\t\t\treturn v0;\n\t\t} finally {\n\t\t\twasm.__wbindgen_export_0.value += 16;\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} delay\n\t * @param {number} quality\n\t * @param {Uint8Array} buffer\n\t */\n\tadd(delay, quality, buffer) {\n\t\tconst ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);\n\t\twasm.gif_encoder_add(this.ptr, delay, quality, ptr0, WASM_VECTOR_LEN);\n\t}\n}\n\nmodule.exports = {GIFEncoder};\n","const {version} = require('../../package.json');\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nlet cachegetUint16Memory0 = null;\n\nfunction getUint16Memory0() {\n    if (cachegetUint16Memory0 === null || cachegetUint16Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint16Memory0 = new Uint16Array(wasm.memory.buffer);\n    }\n    return cachegetUint16Memory0;\n}\n\nfunction getArrayU16FromWasm0(ptr, len) {\n    return getUint16Memory0().subarray(ptr / 2, ptr / 2 + len);\n}\n\nasync function initWASM() {\n    if (wasm) return;\n\n    const { instance } = await WebAssembly.instantiate(await fetch(`https://unpkg.com/imagescript@${version}/utils/wasm/jpeg.wasm`).then(r => r.arrayBuffer()));\n    wasm = instance.exports;\n}\n\nmodule.exports = {\n    /**\n     * @param {number} width\n     * @param {number} height\n     * @param {number} quality\n     * @param {Uint8Array|Uint8ClampedArray} buffer\n     * @returns {Uint8Array}\n     */\n    async encode(width, height, quality, buffer) {\n        await initWASM();\n\n        try {\n            const retptr = wasm.__wbindgen_export_0.value - 16;\n            wasm.__wbindgen_export_0.value = retptr;\n            const ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);\n            wasm.encode(retptr, width, height, quality, ptr0, WASM_VECTOR_LEN);\n            const r0 = getInt32Memory0()[retptr / 4];\n            const r1 = getInt32Memory0()[retptr / 4 + 1];\n            const v1 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v1;\n        } finally {\n            wasm.__wbindgen_export_0.value += 16;\n        }\n    },\n    /**\n     * @param {number} ptr\n     * @param {Uint8Array} buffer\n     * @param {number} width\n     * @param {number} height\n     * @returns {number}\n     */\n    async decode(ptr, buffer, width, height) {\n        await initWASM();\n\n        const ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);\n        return wasm.decode(ptr, ptr0, WASM_VECTOR_LEN, width, height);\n    },\n    /**\n     * @param {number} id\n     * @returns {Uint16Array}\n     */\n    meta(id) {\n        try {\n            const retptr = wasm.__wbindgen_export_0.value - 16;\n            wasm.__wbindgen_export_0.value = retptr;\n            wasm.meta(retptr, id);\n            const r0 = getInt32Memory0()[retptr / 4];\n            const r1 = getInt32Memory0()[retptr / 4 + 1];\n            const v0 = getArrayU16FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 2);\n            return v0;\n        } finally {\n            wasm.__wbindgen_export_0.value += 16;\n        }\n    },\n    /**\n     * @param {number} id\n     * @returns {Uint8Array}\n     */\n    buffer(id) {\n        try {\n            const retptr = wasm.__wbindgen_export_0.value - 16;\n            wasm.__wbindgen_export_0.value = retptr;\n            wasm.buffer(retptr, id);\n            const r0 = getInt32Memory0()[retptr / 4];\n            const r1 = getInt32Memory0()[retptr / 4 + 1];\n            const v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_export_0.value += 16;\n        }\n    },\n    /**\n     * @param {number} id\n     */\n    free(id) {\n        wasm.free(id);\n    }\n}\n","const {version} = require('../../package.json');\nlet wasm;\n\nlet WASM_VECTOR_LEN = 0;\n\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nlet cachedTextEncoder = new TextEncoder();\n\nconst encodeString = (typeof cachedTextEncoder.encodeInto === 'function'\n    ? function (arg, view) {\n        return cachedTextEncoder.encodeInto(arg, view);\n    }\n    : function (arg, view) {\n        const buf = cachedTextEncoder.encode(arg);\n        view.set(buf);\n        return {\n            read: arg.length,\n            written: buf.length\n        };\n    });\n\nfunction passStringToWasm0(arg, malloc, realloc) {\n\n    if (realloc === undefined) {\n        const textEncoder = new TextEncoder();\n        const buf = textEncoder.encode(arg);\n        const ptr = malloc(buf.length);\n        getUint8Memory0().subarray(ptr, ptr + buf.length).set(buf);\n        WASM_VECTOR_LEN = buf.length;\n        return ptr;\n    }\n\n    let len = arg.length;\n    let ptr = malloc(len);\n\n    const mem = getUint8Memory0();\n\n    let offset = 0;\n\n    for (; offset < len; offset++) {\n        const code = arg.charCodeAt(offset);\n        if (code > 0x7F) break;\n        mem[ptr + offset] = code;\n    }\n\n    if (offset !== len) {\n        if (offset !== 0) {\n            arg = arg.slice(offset);\n        }\n        ptr = realloc(ptr, len, len = offset + arg.length * 3);\n        const view = getUint8Memory0().subarray(ptr + offset, ptr + len);\n        const ret = encodeString(arg, view);\n\n        offset += ret.written;\n    }\n\n    WASM_VECTOR_LEN = offset;\n    return ptr;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n    if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n    }\n    return cachegetInt32Memory0;\n}\n\nlet cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n    if (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n    }\n    return cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n    return getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n    return getUint8Memory0().subarray(ptr, ptr + len);\n}\n\nmodule.exports = {\n    /**\n     * @param {number} ptr\n     * @param {string} svg\n     * @param {number} fit_kind\n     * @param {number} zoom\n     * @param {number} width\n     * @param {number} height\n     * @returns {number}\n     */\n    async rgba(ptr, svg, fit_kind, zoom, width, height) {\n        if (!wasm) {\n            const { instance } = await WebAssembly.instantiate(await fetch(`https://unpkg.com/imagescript@${version}/utils/wasm/svg.wasm`).then(r => r.arrayBuffer()));\n            wasm = instance.exports;\n        }\n\n        const ptr0 = passStringToWasm0(svg, wasm.__wbindgen_malloc, wasm.__wbindgen_realloc);\n        return wasm.rgba(ptr, ptr0, WASM_VECTOR_LEN, fit_kind, zoom, width, height);\n    },\n    /**\n     * @param {number} id\n     * @returns {Uint32Array}\n     */\n    meta(id) {\n        try {\n            const retptr = wasm.__wbindgen_export_2.value - 16;\n            wasm.__wbindgen_export_2.value = retptr;\n            wasm.meta(retptr, id);\n            const r0 = getInt32Memory0()[retptr / 4];\n            const r1 = getInt32Memory0()[retptr / 4 + 1];\n            const v0 = getArrayU32FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1 * 4);\n            return v0;\n        } finally {\n            wasm.__wbindgen_export_2.value += 16;\n        }\n    },\n    /**\n     * @param {number} id\n     * @returns {Uint8Array}\n     */\n    buffer(id) {\n        try {\n            const retptr = wasm.__wbindgen_export_2.value - 16;\n            wasm.__wbindgen_export_2.value = retptr;\n            wasm.buffer(retptr, id);\n            const r0 = getInt32Memory0()[retptr / 4];\n            const r1 = getInt32Memory0()[retptr / 4 + 1];\n            const v0 = getArrayU8FromWasm0(r0, r1).slice();\n            wasm.__wbindgen_free(r0, r1);\n            return v0;\n        } finally {\n            wasm.__wbindgen_export_2.value += 16;\n        }\n    },\n    /**\n     * @param {number} id\n     */\n    free(id) {\n        wasm.free(id);\n    }\n};\n","const {version} = require('../../package.json');\nlet wasm;\n\nlet cachegetUint8Memory0 = null;\n\nfunction getUint8Memory0() {\n\tif (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n\t\tcachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n\t}\n\treturn cachegetUint8Memory0;\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n\tconst ptr = malloc(arg.length * 1);\n\tgetUint8Memory0().set(arg, ptr / 1);\n\tWASM_VECTOR_LEN = arg.length;\n\treturn ptr;\n}\n\nlet cachegetInt32Memory0 = null;\n\nfunction getInt32Memory0() {\n\tif (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {\n\t\tcachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);\n\t}\n\treturn cachegetInt32Memory0;\n}\n\nlet cachegetUint32Memory0 = null;\n\nfunction getUint32Memory0() {\n\tif (cachegetUint32Memory0 === null || cachegetUint32Memory0.buffer !== wasm.memory.buffer) {\n\t\tcachegetUint32Memory0 = new Uint32Array(wasm.memory.buffer);\n\t}\n\treturn cachegetUint32Memory0;\n}\n\nfunction getArrayU32FromWasm0(ptr, len) {\n\treturn getUint32Memory0().subarray(ptr / 4, ptr / 4 + len);\n}\n\nfunction getArrayU8FromWasm0(ptr, len) {\n\treturn getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);\n}\n\nmodule.exports = {\n\t/**\n\t * @param {number} ptr\n\t * @param {Uint8Array} buffer\n\t * @returns {number}\n\t */\n\tasync decode(ptr, buffer) {\n\t\tif (!wasm) {\n\t\t\tconst { instance } = await WebAssembly.instantiate(await fetch(`https://unpkg.com/imagescript@${version}/utils/wasm/tiff.wasm`).then(r => r.arrayBuffer()));\n\t\t\twasm = instance.exports;\n\t\t}\n\n\t\tconst ptr0 = passArray8ToWasm0(buffer, wasm.__wbindgen_malloc);\n\t\treturn wasm.decode(ptr, ptr0, WASM_VECTOR_LEN);\n\t},\n\t/**\n\t * @param {number} id\n\t * @returns {Uint32Array}\n\t */\n\tmeta(id) {\n\t\ttry {\n\t\t\tconst retptr = wasm.__wbindgen_export_1.value - 16;\n\t\t\twasm.__wbindgen_export_1.value = retptr;\n\t\t\twasm.meta(retptr, id);\n\t\t\tconst r0 = getInt32Memory0()[retptr / 4];\n\t\t\tconst r1 = getInt32Memory0()[retptr / 4 + 1];\n\t\t\tconst v0 = getArrayU32FromWasm0(r0, r1).slice();\n\t\t\twasm.__wbindgen_free(r0, r1 * 4);\n\t\t\treturn v0;\n\t\t} finally {\n\t\t\twasm.__wbindgen_export_1.value += 16;\n\t\t}\n\t},\n\t/**\n\t * @param {number} id\n\t * @returns {Uint8Array}\n\t */\n\tbuffer(id) {\n\t\ttry {\n\t\t\tconst retptr = wasm.__wbindgen_export_1.value - 16;\n\t\t\twasm.__wbindgen_export_1.value = retptr;\n\t\t\twasm.buffer(retptr, id);\n\t\t\tconst r0 = getInt32Memory0()[retptr / 4];\n\t\t\tconst r1 = getInt32Memory0()[retptr / 4 + 1];\n\t\t\tconst v0 = getArrayU8FromWasm0(r0, r1).slice();\n\t\t\twasm.__wbindgen_free(r0, r1 * 1);\n\t\t\treturn v0;\n\t\t} finally {\n\t\t\twasm.__wbindgen_export_1.value += 16;\n\t\t}\n\t},\n\t/**\n\t * @param {number} id\n\t */\n\tfree(id) {\n\t\twasm.free(id);\n\t}\n}\n","const {version} = require('../../package.json');\nasync function load() {\n    let wasm;\n\n    {\n        const { instance } = await WebAssembly.instantiate(await fetch(`https://unpkg.com/imagescript@${version}/utils/wasm/zlib.wasm`).then(r => r.arrayBuffer()));\n\n        wasm = instance.exports;\n    }\n\n    let u8array_ref = new Uint8Array(wasm.memory.buffer);\n    let i32array_ref = new Int32Array(wasm.memory.buffer);\n\n    function u8array() {\n        return u8array_ref.buffer === wasm.memory.buffer ? u8array_ref : (u8array_ref = new Uint8Array(wasm.memory.buffer));\n    }\n\n    function i32array() {\n        return i32array_ref.buffer === wasm.memory.buffer ? i32array_ref : (i32array_ref = new Int32Array(wasm.memory.buffer));\n    }\n\n    function ptr_to_u8array(ptr, len) {\n        return u8array().subarray(ptr, ptr + len);\n    }\n\n    function u8array_to_ptr(buffer) {\n        const ptr = wasm.__wbindgen_malloc(buffer.length);\n        u8array().set(buffer, ptr);\n        return ptr;\n    }\n\n    return {\n        compress(buffer, level) {\n            const ptr = u8array_to_ptr(buffer);\n            wasm.compress(8, ptr, buffer.length, level);\n\n            const i32 = i32array();\n            const slice = ptr_to_u8array(i32[2], i32[3]).slice();\n            wasm.__wbindgen_free(i32[2], i32[3]);\n            return slice;\n        }, decompress(buffer, limit) {\n            const ptr = u8array_to_ptr(buffer);\n\n            try {\n                wasm.decompress(8, ptr, buffer.length, limit);\n\n                const i32 = i32array();\n                const slice = ptr_to_u8array(i32[2], i32[3]).slice();\n                wasm.__wbindgen_free(i32[2], i32[3]);\n                return slice;\n            } catch {\n                wasm.__wbindgen_free(ptr, buffer.length);\n                throw new Error('zlib: panic');\n            }\n        }\n    };\n}\n\nmodule.exports = {\n    async compress(buffer, level) {\n        const {compress} = module.exports = await load();\n\n        return compress(buffer, level);\n    },\n    async decompress(buffer, limit) {\n        const {decompress} = module.exports = await load();\n\n        return decompress(buffer, limit);\n    }\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(655);\n"],"sourceRoot":""}